#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Mar 08, 2019 02:12:32 AM CST  platform: Windows NT
#
# GUI module EDITED by Kong Jimmy Vang.
#

""" HomePage.py
    
    Description:
        This is the Home page for the shopping cart project.
    
    Team: Daniel Bartelson, Ian Neville, Brian Draheim, Kong Jimmy Vang
    Coder(s): Kong Jimmy Vang, Ian Neville, Daniel Bartelson
    Database: Brian Draheim
"""

###########################################################
# Python Imports
import os
import sys
import sqlite3
import math
from pathlib import Path, PureWindowsPath

# Our Imports
from ItemBox import ItemBox

# Check the version of Python and import accordingly.
if sys.version_info.major == 2:
    # Python 2.x
    from Tkinter import *
    import Tkinter as tk
    import Tkinter.messagebox
    import ttk
elif sys.version_info.major == 3:
    # Python 3.x
    from tkinter import *
    import tkinter as tk
    import tkinter.messagebox
    import tkinter.ttk as ttk
else:
    # Unsupported Version
    print("\nThis version of Python is not supported.")
    print("***EXITING SOFTWARE***")
    sys.exit()

from PIL import ImageTk, Image


DEBUG = True

###########################################################


class HomePage(tk.Frame):
    """
    A Tkinter.Frame object.

    This class is the "Home Page" contains the "Browsing Area/Page".

    All searches will appear here on this page. 'ShoppingCart.py' will handle all searches.
    'Header.py' will hold the search box and search button that will call on 'ShoppingCart.py' search functions.
    """

    def __init__(self, top_frame=None, *args, **kwargs):
        """
        :param top_frame: A reference to the TOP Tkinter.Frame object this Frame is attached to.
                (Used to allow access to the ShoppingCart's functions and Tkinter Frames.)
        :param args:
        :param kwargs:
        """

        tk.Frame.__init__(self, *args, **kwargs)

        ### Attributes ###
        self.top_frame = top_frame
        self.list_of_itemboxes = []  # A list of Itembox widgets. Default: Determined by display_items()

        self.search_list = []  # A fetch-all list of searched products from the database.
        self.conn = sqlite3.connect("ShoppingCart.db")
        self.cursor = self.conn.cursor()

        self.current_page = 1  # Tracks the current browsing page. Default: 1
        self.MAX_ITEMS_PER_PAGE = 3  # Max amount of items per browsing page. Default: 3
        self.MAX_AMOUNT_OF_ITEMS = 0  # Max amount of items found in the database. Default: Determined by search()
        self.MAX_PAGES = 0  # Upperbound limit of the number of browsing pages. Default: Determined by search()
        
        '''This class configures and populates the toplevel window.
           top_frame is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font10 = "-family {Franklin Gothic Heavy} -size 12"
        font12 = "-family {Franklin Gothic Heavy} -size 11"
        font14 = "-family {Franklin Gothic Heavy} -size 13"
        font17 = "-family {Franklin Gothic Heavy} -size 15 -underline "  \
            "1"
        font18 = "-family {Franklin Gothic Heavy} -size 15"
        font21 = "TkDefaultFont"
        font9 = "-family {Franklin Gothic Heavy} -size 14"

        """self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected_product', _compcolor), ('active',_ana2color)])"""

        # self.geometry("1024x768+459+174")
        # self.title("Shopping Cart")
        self.configure(background="#d9d9d9")
        self.configure(highlightbackground="#d9d9d9")
        self.configure(highlightcolor="black")

        ### Widgets ###
        self.frame_browse = tk.Frame(self)
        self.frame_browse.place(relx=0.01, rely=0.13, relheight=0.827
                , relwidth=0.981)
        self.frame_browse.configure(relief='groove')
        self.frame_browse.configure(borderwidth="2")
        self.frame_browse.configure(relief='groove')
        self.frame_browse.configure(background="#d9d9d9")
        self.frame_browse.configure(highlightbackground="#d9d9d9")
        self.frame_browse.configure(highlightcolor="black")
        self.frame_browse.configure(width=1005)

        self.spinbox_page = tk.Spinbox(self.frame_browse, from_=1.0, to=100.0)
        self.spinbox_page.place(relx=0.458, rely=0.945, relheight=0.03, relwidth=0.055)
        self.spinbox_page.configure(activebackground="#f9f9f9")
        self.spinbox_page.configure(background="white")
        self.spinbox_page.configure(buttonbackground="#d9d9d9")
        self.spinbox_page.configure(disabledforeground="#a3a3a3")
        self.spinbox_page.configure(font=font10)
        self.spinbox_page.configure(foreground="black")
        self.spinbox_page.configure(highlightbackground="black")
        self.spinbox_page.configure(highlightcolor="black")
        self.spinbox_page.configure(insertbackground="black")
        self.spinbox_page.configure(selectbackground="#c4c4c4")
        self.spinbox_page.configure(selectforeground="black")
        # self.spinbox_page.configure(textvariable=tk.StringVar())
        self.spinbox_page.bind('<KeyRelease>', self.update_page)
        self.spinbox_page.bind('<FocusOut>', self.update_page)
        self.spinbox_page.bind('<FocusIn>', self.update_page)

        self.btn_prev_page = tk.Button(self.frame_browse)
        self.btn_prev_page.place(relx=0.328, rely=0.929, height=29, width=106)
        self.btn_prev_page.configure(activebackground="#ececec")
        self.btn_prev_page.configure(activeforeground="#000000")
        self.btn_prev_page.configure(background="#d9d9d9")
        self.btn_prev_page.configure(disabledforeground="#a3a3a3")
        self.btn_prev_page.configure(font=font10)
        self.btn_prev_page.configure(foreground="#000000")
        self.btn_prev_page.configure(highlightbackground="#d9d9d9")
        self.btn_prev_page.configure(highlightcolor="black")
        self.btn_prev_page.configure(pady="0")
        self.btn_prev_page.configure(text='Previous')

        self.btn_next_page = tk.Button(self.frame_browse)
        self.btn_next_page.place(relx=0.537, rely=0.929, height=29, width=105)
        self.btn_next_page.configure(activebackground="#ececec")
        self.btn_next_page.configure(activeforeground="#000000")
        self.btn_next_page.configure(background="#d9d9d9")
        self.btn_next_page.configure(disabledforeground="#a3a3a3")
        self.btn_next_page.configure(font=font10)
        self.btn_next_page.configure(foreground="#000000")
        self.btn_next_page.configure(highlightbackground="#d9d9d9")
        self.btn_next_page.configure(highlightcolor="black")
        self.btn_next_page.configure(pady="0")
        self.btn_next_page.configure(text='Next')
        
        self.lbl_browsing_page = tk.Label(self.frame_browse)
        self.lbl_browsing_page.place(relx=0.036, rely=0.016, height=21
                , width=194)
        self.lbl_browsing_page.configure(activebackground="#f9f9f9")
        self.lbl_browsing_page.configure(activeforeground="black")
        self.lbl_browsing_page.configure(anchor='w')
        self.lbl_browsing_page.configure(background="#d9d9d9")
        self.lbl_browsing_page.configure(disabledforeground="#a3a3a3")
        self.lbl_browsing_page.configure(font=font17)
        self.lbl_browsing_page.configure(foreground="#000000")
        self.lbl_browsing_page.configure(highlightbackground="#d9d9d9")
        self.lbl_browsing_page.configure(highlightcolor="black")
        self.lbl_browsing_page.configure(text='Browsing Area')
        self.lbl_browsing_page.configure(width=194)

        self.lbl_search_results = tk.Label(self.frame_browse)
        self.lbl_search_results.place(relx=0.322, rely=0.031, height=21
                , width=574)
        self.lbl_search_results.configure(anchor='w')
        self.lbl_search_results.configure(background="#d9d9d9")
        self.lbl_search_results.configure(disabledforeground="#a3a3a3")
        self.lbl_search_results.configure(font="-family {Franklin Gothic Book} -size 10")
        self.lbl_search_results.configure(foreground="#000000")
        self.lbl_search_results.configure(text='Search Results: 0 Products Found.')
        self.lbl_search_results.configure(width=574)

        # ------------------------------------------------------------------
        # All Button Commands
        self.btn_prev_page.configure(command=self.goto_prev_page)
        self.btn_next_page.configure(command=self.goto_next_page)
        tcl_update_page = self.register(self.update_page)
        self.spinbox_page.configure(command=(tcl_update_page, '%d'))

        # Other
        self.initialization()
        self.display_items()

    def initialization(self):
        """
        Initialize this home page.
        """
        self.browse()

    def update_page(self, event):
        """
        Updates the page number.
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        try:
            self.current_page = int(self.spinbox_page.get())
        except:
            if self.spinbox_page.get() != "":
                self.current_page = 1
            else:
                return

        if self.current_page < 1:
            self.current_page = 1

        if self.current_page > self.MAX_PAGES:
            self.current_page = self.MAX_PAGES

        self.display_items()

    def browse(self):
        """
        Browse through all products/items. Calls upon the search() function.
        Searching for an empty string "" results in all products being found due to how SQLite3 queries data.
        """
        self.search("")
        self.lbl_search_results.configure(text='Browsing: {} Products Found.'.format(self.MAX_AMOUNT_OF_ITEMS))

    def search(self, search_text=""):
        """
        Search for a particular product/item.

        :param search_text: The product/item to search for. An empty string ("") allows all products to be searched.
        """

        # TODO: Escape special characters from "search_text" to prevent SQL Injection.
        # Query through the database for the searched text, "search_text".
        self.cursor.execute("SELECT * FROM Products WHERE (Name LIKE '%{}%' OR Category LIKE '%{}%') AND Active == 1"
                            .format(search_text, search_text))

        # Clear the search list and insert the new query of searched products into the list.
        self.search_list.clear()
        self.search_list = self.cursor.fetchall()

        # Set attributes to help with display. (Calculate and store the max items and max pages)
        self.current_page = 1
        self.MAX_AMOUNT_OF_ITEMS = len(self.search_list)
        self.MAX_PAGES = math.ceil(len(self.search_list)/3.0)

        # Display the products/items.
        self.display_items()
        self.lbl_search_results.configure(text='Search Results: {} Products Found.'.format(self.MAX_AMOUNT_OF_ITEMS))

    def display_items(self):
        """
        Display products/items, which are on the "display_list".

        Currently can display 3 products/items at a time.
        """

        if DEBUG:
            print("___ Display Items On Browsing Page ___")

        # Remove old itemboxes.
        for itembox in self.list_of_itemboxes:
            itembox.destroy()
        self.list_of_itemboxes.clear()

        # Create and display 3 itemboxes.
        #       (Should only create 1 to 3 rows per page currently)
        box_position_mult = 0
        c_page = self.current_page
        max_items = self.MAX_ITEMS_PER_PAGE
        for i in range((c_page - 1) * max_items, c_page * max_items):

            # Break from the loop when indexing beyond the list size/length.
            if i >= len(self.search_list):
                break

            row = self.search_list[i]
            print("{}, {}, {}, {}, {}, {}".format(row[0],row[1],row[2],row[3],row[4],row[5]))

            relative_y = 0.065 + box_position_mult*0.2800  # This math determines the proper y placement of each box.
            pid = str(row[0])
            name = str(row[1])
            category = str(row[2])
            price = "Price: ${}".format( str("{:.2f}".format(row[3]) ))
            quantity_left = row[4]
            info = str(row[5])
            image_blob = row[6]

            # Extract image data.
            image_data = image_blob
            with open(Path("Images/temp_image.jpeg"), 'wb') as f:
                f.write(image_data)
            f.close()

            image = Path("Images/temp_image.jpeg")

            # Create an itembox.
            itembox = ItemBox(self.top_frame,
                              self.frame_browse,
                              relative_y,
                              pid,
                              name,
                              category,
                              price,
                              quantity_left,
                              info,
                              image)

            # Add to the itembox list.
            self.list_of_itemboxes.append(itembox)

            box_position_mult += 1

        # Display products/items based on the current page the user is on.
        if self.current_page <= 1:
            self.btn_prev_page.configure(state='disabled')
        else:
            self.btn_prev_page.configure(state='normal')

        if self.current_page >= self.MAX_PAGES:
            self.btn_next_page.configure(state='disabled')
        else:
            self.btn_next_page.configure(state='normal')

        if len(self.list_of_itemboxes) <= 0:
            self.spinbox_page.configure(state='disabled')
        else:
            self.spinbox_page.configure(state='normal')

            
        self.spinbox_page.delete(0, END)
        self.spinbox_page.insert(0, str(self.current_page))

    def goto_prev_page(self):
        """
        Display the Previous page of products.
        """
        print("___prev_page___")
        if self.current_page > 1:
            self.current_page -= 1
            self.display_items()

    def goto_next_page(self):
        """
        Display the Next page of products.
        """
        print("___next_page___")
        if self.current_page < self.MAX_PAGES:
            self.current_page += 1
            self.display_items()


###########################################################
