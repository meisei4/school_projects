#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Apr 14, 2019 01:02:40 PM CDT  platform: Windows NT


""" CartPage.py

    Description:
        This is the Cart Page where a user may view all their products/items.

    Team: Daniel Bartelson, Ian Neville, Brian Draheim, Kong Jimmy Vang
    Coder(s): Kong Jimmy Vang, Ian Neville, Daniel Bartelson
    Database: Brian Draheim
"""

###########################################################
# Python Imports
import os
import sys
import sqlite3
import math
import datetime
import taxjar
import re  # Contains classes allowing removal of specific characters. (Such as letters in a debit/credit card number.)
from decimal import Decimal


# Check the version of Python and import accordingly.
if sys.version_info.major == 2:
    # Python 2.x
    from Tkinter import *
    import Tkinter as tk
    import Tkinter.messagebox
    import ttk
elif sys.version_info.major == 3:
    # Python 3.x
    from tkinter import *
    import tkinter as tk
    import tkinter.messagebox
    import tkinter.ttk as ttk
else:
    # Unsupported Version
    print("\nThis version of Python is not supported.")
    print("***EXITING SOFTWARE***")
    sys.exit()

from PIL import ImageTk, Image


DEBUG = True

###########################################################


class CartPage(tk.Frame):
    def __init__(self, top_frame=None, *args, **kwargs):
        """
        :param top_frame: A reference to the TOP Tkinter.Frame object this Frame is attached to.
                (Used to allow access to the ShoppingCart's functions and Tkinter Frames.)
        :param args:
        :param kwargs:
        """

        tk.Frame.__init__(self, *args, **kwargs)

        ### Attributes ###
        self.top_frame = top_frame
        self.list_of_itemboxes = []  # A list of Itembox widgets. Default: Determined by display_items()

        self.display_list = []  # A fetch-all list of searched products from the database.
        self.conn = sqlite3.connect("ShoppingCart.db")
        self.cursor = self.conn.cursor()

        self.subtotal = 0.00
        self.discount_rate = 0.00
        self.discount = 0.00
        self.client = taxjar.Client(api_key='eec11800134d715d41806c1aa85a8e5d')
        self.tax_rate = 0.0
        self.tax = 0.00
        self.total = 0.00
        self.total_rounded = 0.00

        self.current_page = 1  # Tracks the current browsing page. Default: 1
        self.MAX_ITEMS_PER_PAGE = 3  # Max amount of items per browsing page. Default: 3
        self.MAX_AMOUNT_OF_ITEMS = 0  # Max amount of items found in the database. Default: Determined by search()
        self.MAX_PAGES = 0  # Upperbound limit of the number of browsing pages. Default: Determined by search()

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        #self.geometry("1024x768+423+114")
        #self.title("Shopping Cart")
        self.configure(background="#d9d9d9")
        self.configure(highlightbackground="#d9d9d9")
        self.configure(highlightcolor="black")

        ### Widgets ###
        self.frame_cart = tk.Frame(self)
        self.frame_cart.place(relx=0.01, rely=0.13, relheight=0.827
                , relwidth=0.659)
        self.frame_cart.configure(relief='groove')
        self.frame_cart.configure(borderwidth="2")
        self.frame_cart.configure(relief='groove')
        self.frame_cart.configure(background="#d9d9d9")
        self.frame_cart.configure(highlightbackground="#d9d9d9")
        self.frame_cart.configure(highlightcolor="black")
        self.frame_cart.configure(width=675)

        self.spinbox_page = tk.Spinbox(self.frame_cart, from_=1.0, to=100.0)
        self.spinbox_page.place(relx=0.4, rely=0.945, relheight=0.03
                , relwidth=0.081)
        self.spinbox_page.configure(activebackground="#f9f9f9")
        self.spinbox_page.configure(background="white")
        self.spinbox_page.configure(buttonbackground="#d9d9d9")
        self.spinbox_page.configure(disabledforeground="#a3a3a3")
        self.spinbox_page.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.spinbox_page.configure(foreground="black")
        self.spinbox_page.configure(highlightbackground="black")
        self.spinbox_page.configure(highlightcolor="black")
        self.spinbox_page.configure(insertbackground="black")
        self.spinbox_page.configure(selectbackground="#c4c4c4")
        self.spinbox_page.configure(selectforeground="black")
        self.spinbox_page.configure(takefocus="0")
        #self.spinbox_page.configure(textvariable=CartPage_support.spinbox)
        self.spinbox_page.bind('<KeyRelease>', self.update_page)
        self.spinbox_page.bind('<FocusOut>', self.update_page)
        self.spinbox_page.bind('<FocusIn>', self.update_page)


        self.btn_prev_page = tk.Button(self.frame_cart)
        self.btn_prev_page.place(relx=0.207, rely=0.929, height=29, width=106)
        self.btn_prev_page.configure(activebackground="#ececec")
        self.btn_prev_page.configure(activeforeground="#000000")
        self.btn_prev_page.configure(background="#d9d9d9")
        self.btn_prev_page.configure(disabledforeground="#a3a3a3")
        self.btn_prev_page.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.btn_prev_page.configure(foreground="#000000")
        self.btn_prev_page.configure(highlightbackground="#d9d9d9")
        self.btn_prev_page.configure(highlightcolor="black")
        self.btn_prev_page.configure(pady="0")
        self.btn_prev_page.configure(takefocus="0")
        self.btn_prev_page.configure(text='''Previous''')

        self.btn_next_page = tk.Button(self.frame_cart)
        self.btn_next_page.place(relx=0.519, rely=0.929, height=29, width=105)
        self.btn_next_page.configure(activebackground="#ececec")
        self.btn_next_page.configure(activeforeground="#000000")
        self.btn_next_page.configure(background="#d9d9d9")
        self.btn_next_page.configure(disabledforeground="#a3a3a3")
        self.btn_next_page.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.btn_next_page.configure(foreground="#000000")
        self.btn_next_page.configure(highlightbackground="#d9d9d9")
        self.btn_next_page.configure(highlightcolor="black")
        self.btn_next_page.configure(pady="0")
        self.btn_next_page.configure(takefocus="0")
        self.btn_next_page.configure(text='''Next''')

        self.lbl_cart = tk.Label(self.frame_cart)
        self.lbl_cart.place(relx=0.044, rely=0.016, height=21, width=194)
        self.lbl_cart.configure(activebackground="#f9f9f9")
        self.lbl_cart.configure(activeforeground="black")
        self.lbl_cart.configure(anchor='w')
        self.lbl_cart.configure(background="#d9d9d9")
        self.lbl_cart.configure(disabledforeground="#a3a3a3")
        self.lbl_cart.configure(font="-family {Franklin Gothic Heavy} -size 15 -underline 1")
        self.lbl_cart.configure(foreground="#000000")
        self.lbl_cart.configure(highlightbackground="#d9d9d9")
        self.lbl_cart.configure(highlightcolor="black")
        self.lbl_cart.configure(text='''Shopping Cart''')

        self.lbl_message = tk.Label(self.frame_cart)
        self.lbl_message.place(relx=0.341, rely=0.031, height=21, width=404)
        self.lbl_message.configure(activebackground="#f9f9f9")
        self.lbl_message.configure(activeforeground="black")
        self.lbl_message.configure(anchor='w')
        self.lbl_message.configure(background="#d9d9d9")
        self.lbl_message.configure(disabledforeground="#a3a3a3")
        self.lbl_message.configure(font="-family {Franklin Gothic Book} -size 10")
        self.lbl_message.configure(foreground="#000000")
        self.lbl_message.configure(highlightbackground="#d9d9d9")
        self.lbl_message.configure(highlightcolor="black")
        self.lbl_message.configure(text='''0 Items Found In Cart.''')

        self.frame_checkout = tk.Frame(self)
        self.frame_checkout.place(relx=0.674, rely=0.13, relheight=0.827
                , relwidth=0.317)
        self.frame_checkout.configure(relief='groove')
        self.frame_checkout.configure(borderwidth="2")
        self.frame_checkout.configure(relief='groove')
        self.frame_checkout.configure(background="#d9d9d9")
        self.frame_checkout.configure(highlightbackground="#d9d9d9")
        self.frame_checkout.configure(highlightcolor="black")
        self.frame_checkout.configure(width=325)

        self.lbl_promotion_code = tk.Label(self.frame_checkout)
        self.lbl_promotion_code.place(relx=0.092, rely=0.047, height=31
                , width=259)
        self.lbl_promotion_code.configure(activebackground="#f9f9f9")
        self.lbl_promotion_code.configure(activeforeground="black")
        self.lbl_promotion_code.configure(background="#d9d9d9")
        self.lbl_promotion_code.configure(disabledforeground="#a3a3a3")
        self.lbl_promotion_code.configure(font="-family {Franklin Gothic Heavy} -size 15 -underline 1")
        self.lbl_promotion_code.configure(foreground="#000000")
        self.lbl_promotion_code.configure(highlightbackground="#d9d9d9")
        self.lbl_promotion_code.configure(highlightcolor="black")
        self.lbl_promotion_code.configure(text='''Promotion Code''')

        self.entry_promotion_code = tk.Entry(self.frame_checkout)
        self.entry_promotion_code.place(relx=0.092, rely=0.11, height=20
                , relwidth=0.812)
        self.entry_promotion_code.configure(background="white")
        self.entry_promotion_code.configure(disabledforeground="#a3a3a3")
        self.entry_promotion_code.configure(font="-family {Franklin Gothic Heavy} -size 11")
        self.entry_promotion_code.configure(foreground="#000000")
        self.entry_promotion_code.configure(highlightbackground="#d9d9d9")
        self.entry_promotion_code.configure(highlightcolor="black")
        self.entry_promotion_code.configure(insertbackground="black")
        self.entry_promotion_code.configure(selectbackground="#c4c4c4")
        self.entry_promotion_code.configure(selectforeground="black")
        self.entry_promotion_code.bind('<Return>', self.apply_promo)

        self.btn_apply_promo = tk.Button(self.frame_checkout)
        self.btn_apply_promo.place(relx=0.615, rely=0.157, height=26, width=85)
        self.btn_apply_promo.configure(activebackground="#ececec")
        self.btn_apply_promo.configure(activeforeground="#000000")
        self.btn_apply_promo.configure(background="#d9d9d9")
        self.btn_apply_promo.configure(disabledforeground="#a3a3a3")
        self.btn_apply_promo.configure(font="-family {Arial} -size 10 -weight bold")
        self.btn_apply_promo.configure(foreground="#000000")
        self.btn_apply_promo.configure(highlightbackground="#d9d9d9")
        self.btn_apply_promo.configure(highlightcolor="black")
        self.btn_apply_promo.configure(pady="0")
        self.btn_apply_promo.configure(text='''Apply Code''')

        # self.lbl_address = tk.Label(self.frame_checkout)
        # self.lbl_address.place(relx=0.077, rely=0.055*3.6, height=31
        #         , width=159)
        # self.lbl_address.configure(activebackground="#f9f9f9")
        # self.lbl_address.configure(activeforeground="black")
        # self.lbl_address.configure(background="#d9d9d9")
        # self.lbl_address.configure(disabledforeground="#a3a3a3")
        # self.lbl_address.configure(font="-family {Franklin Gothic Heavy} -size 15 -underline 1")
        # self.lbl_address.configure(foreground="#000000")
        # self.lbl_address.configure(highlightbackground="#d9d9d9")
        # self.lbl_address.configure(highlightcolor="black")
        # self.lbl_address.configure(text='Address')
        #
        # self.entry_address = tk.Entry(self.frame_checkout, textvariable='content')
        # self.entry_address.place(relx=0.092, rely=0.126*2, height=20
        #                                 , relwidth=0.812)
        # self.entry_address.configure(background="white")
        # self.entry_address.configure(disabledforeground="#a3a3a3")
        # self.entry_address.configure(font="-family {Franklin Gothic Heavy} -size 11")
        # self.entry_address.configure(foreground="#000000")
        # self.entry_address.configure(highlightbackground="#d9d9d9")
        # self.entry_address.configure(highlightcolor="black")
        # self.entry_address.configure(insertbackground="black")
        # self.entry_address.configure(selectbackground="#c4c4c4")
        # self.entry_address.configure(selectforeground="black")

        self.lbl_shipping_address = tk.Label(self.frame_checkout)
        self.lbl_shipping_address.place(relx=0.092, rely=0.205, height=31
                , width=259)
        self.lbl_shipping_address.configure(activebackground="#f9f9f9")
        self.lbl_shipping_address.configure(activeforeground="black")
        self.lbl_shipping_address.configure(anchor='w')
        self.lbl_shipping_address.configure(background="#d9d9d9")
        self.lbl_shipping_address.configure(disabledforeground="#a3a3a3")
        self.lbl_shipping_address.configure(font="-family {Franklin Gothic Heavy} -size 15 -underline 1")
        self.lbl_shipping_address.configure(foreground="#000000")
        self.lbl_shipping_address.configure(highlightbackground="#d9d9d9")
        self.lbl_shipping_address.configure(highlightcolor="black")
        self.lbl_shipping_address.configure(text='''Shipping Address''')
        self.lbl_shipping_address.configure(width=259)

        self.entry_address = tk.Entry(self.frame_checkout)
        self.entry_address.place(relx=0.092, rely=0.268, height=20
                , relwidth=0.812)
        self.entry_address.configure(background="white")
        self.entry_address.configure(disabledforeground="#a3a3a3")
        self.entry_address.configure(font="-family {Arial} -size 10 -weight bold")
        self.entry_address.configure(foreground="#000000")
        self.entry_address.configure(highlightbackground="#d9d9d9")
        self.entry_address.configure(highlightcolor="black")
        self.entry_address.configure(insertbackground="black")
        self.entry_address.configure(selectbackground="#c4c4c4")
        self.entry_address.configure(selectforeground="black")
        self.entry_address.bind('<FocusIn>', self.clear_widget)
        self.entry_address.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_address.bind('<Return>', self.checkout_card_event)
        # self.entry_address.bind('<KeyRelease>', self.validate_entries)

        self.entry_city = tk.Entry(self.frame_checkout)
        self.entry_city.place(relx=0.092, rely=0.299,height=20, relwidth=0.812)
        self.entry_city.configure(background="white")
        self.entry_city.configure(disabledforeground="#a3a3a3")
        self.entry_city.configure(font="-family {Arial} -size 10 -weight bold")
        self.entry_city.configure(foreground="#000000")
        self.entry_city.configure(highlightbackground="#d9d9d9")
        self.entry_city.configure(highlightcolor="black")
        self.entry_city.configure(insertbackground="black")
        self.entry_city.configure(selectbackground="#c4c4c4")
        self.entry_city.configure(selectforeground="black")
        self.entry_city.bind('<FocusIn>', self.clear_widget)
        self.entry_city.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_city.bind('<Return>', self.checkout_card_event)
        # self.entry_city.bind('<KeyRelease>', self.validate_entries)

        self.entry_state = tk.Entry(self.frame_checkout)
        self.entry_state.place(relx=0.092, rely=0.331, height=20, relwidth=0.812)
        self.entry_state.configure(background="white")
        self.entry_state.configure(disabledforeground="#a3a3a3")
        self.entry_state.configure(font="-family {Arial} -size 10 -weight bold")
        self.entry_state.configure(foreground="#000000")
        self.entry_state.configure(highlightbackground="#d9d9d9")
        self.entry_state.configure(highlightcolor="black")
        self.entry_state.configure(insertbackground="black")
        self.entry_state.configure(selectbackground="#c4c4c4")
        self.entry_state.configure(selectforeground="black")
        self.entry_state.bind('<FocusIn>', self.clear_widget)
        self.entry_state.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_state.bind('<Return>', self.checkout_card_event)
        # self.entry_state.bind('<KeyRelease>', self.validate_entries)

        self.entry_country = tk.Entry(self.frame_checkout)
        self.entry_country.place(relx=0.092, rely=0.363, height=20, relwidth=0.812)
        self.entry_country.configure(background="white")
        self.entry_country.configure(disabledforeground="#a3a3a3")
        self.entry_country.configure(font="-family {Arial} -size 10 -weight bold")
        self.entry_country.configure(foreground="#000000")
        self.entry_country.configure(highlightbackground="#d9d9d9")
        self.entry_country.configure(highlightcolor="black")
        self.entry_country.configure(insertbackground="black")
        self.entry_country.configure(selectbackground="#c4c4c4")
        self.entry_country.configure(selectforeground="black")
        self.entry_country.bind('<FocusIn>', self.clear_widget)
        self.entry_country.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_country.bind('<Return>', self.checkout_card_event)
        # self.entry_country.bind('<KeyRelease>', self.validate_entries)

        self.entry_zip_code = tk.Entry(self.frame_checkout)
        self.entry_zip_code.place(relx=0.092, rely=0.394, height=20, relwidth=0.812)
        self.entry_zip_code.configure(background="white")
        self.entry_zip_code.configure(disabledforeground="#a3a3a3")
        self.entry_zip_code.configure(font="-family {Arial} -size 10 -weight bold")
        self.entry_zip_code.configure(foreground="#000000")
        self.entry_zip_code.configure(highlightbackground="#d9d9d9")
        self.entry_zip_code.configure(highlightcolor="black")
        self.entry_zip_code.configure(insertbackground="black")
        self.entry_zip_code.configure(selectbackground="#c4c4c4")
        self.entry_zip_code.configure(selectforeground="black")
        self.entry_zip_code.bind('<FocusIn>', self.clear_widget)
        self.entry_zip_code.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_zip_code.bind('<Return>', self.checkout_card_event)
        self.entry_zip_code.bind('<KeyRelease>', self.validate_entries)

        self.lbl_card_info = tk.Label(self.frame_checkout)
        self.lbl_card_info.place(relx=0.092, rely=0.441, height=31, width=259)
        self.lbl_card_info.configure(activebackground="#f9f9f9")
        self.lbl_card_info.configure(activeforeground="black")
        self.lbl_card_info.configure(anchor='w')
        self.lbl_card_info.configure(background="#d9d9d9")
        self.lbl_card_info.configure(disabledforeground="#a3a3a3")
        self.lbl_card_info.configure(font="-family {Franklin Gothic Heavy} -size 15 -underline 1")
        self.lbl_card_info.configure(foreground="#000000")
        self.lbl_card_info.configure(highlightbackground="#d9d9d9")
        self.lbl_card_info.configure(highlightcolor="black")
        self.lbl_card_info.configure(text='''Card Information''')

        self.entry_card_number = tk.Entry(self.frame_checkout)
        self.entry_card_number.place(relx=0.092, rely=0.504, height=20, relwidth=0.812)
        self.entry_card_number.configure(background="white")
        self.entry_card_number.configure(disabledforeground="#a3a3a3")
        self.entry_card_number.configure(font="-family {Arial} -size 10 -weight bold")
        self.entry_card_number.configure(foreground="#000000")
        self.entry_card_number.configure(highlightbackground="#d9d9d9")
        self.entry_card_number.configure(highlightcolor="black")
        self.entry_card_number.configure(insertbackground="black")
        self.entry_card_number.configure(selectbackground="#c4c4c4")
        self.entry_card_number.configure(selectforeground="black")
        self.entry_card_number.bind('<FocusIn>', self.clear_widget)
        self.entry_card_number.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_card_number.bind('<Return>', self.checkout_card_event)
        self.entry_card_number.bind('<KeyRelease>', self.validate_entries)

        self.entry_card_expire_mm = tk.Entry(self.frame_checkout)
        self.entry_card_expire_mm.place(relx=0.092, rely=0.535, height=20, relwidth=0.135)
        self.entry_card_expire_mm.configure(background="white")
        self.entry_card_expire_mm.configure(disabledforeground="#a3a3a3")
        self.entry_card_expire_mm.configure(font="-family {Arial} -size 10 -weight bold")
        self.entry_card_expire_mm.configure(foreground="#000000")
        self.entry_card_expire_mm.configure(highlightbackground="#d9d9d9")
        self.entry_card_expire_mm.configure(highlightcolor="black")
        self.entry_card_expire_mm.configure(insertbackground="black")
        self.entry_card_expire_mm.configure(selectbackground="#c4c4c4")
        self.entry_card_expire_mm.configure(selectforeground="black")
        self.entry_card_expire_mm.configure(width=34)
        self.entry_card_expire_mm.bind('<FocusIn>', self.clear_widget)
        self.entry_card_expire_mm.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_card_expire_mm.bind('<Return>', self.checkout_card_event)
        self.entry_card_expire_mm.bind('<KeyRelease>', self.validate_entries)

        self.lbl_card_expire_sep = tk.Label(self.frame_checkout)
        self.lbl_card_expire_sep.place(relx=0.215, rely=0.535, height=21, width=31)
        self.lbl_card_expire_sep.configure(background="#d9d9d9")
        self.lbl_card_expire_sep.configure(disabledforeground="#a3a3a3")
        self.lbl_card_expire_sep.configure(foreground="#000000")
        self.lbl_card_expire_sep.configure(text='''/''')
        self.lbl_card_expire_sep.configure(width=31)

        self.entry_card_expire_yy = tk.Entry(self.frame_checkout)
        self.entry_card_expire_yy.place(relx=0.308, rely=0.535, height=20, relwidth=0.135)
        self.entry_card_expire_yy.configure(background="white")
        self.entry_card_expire_yy.configure(disabledforeground="#a3a3a3")
        self.entry_card_expire_yy.configure(font="-family {Arial} -size 10 -weight bold")
        self.entry_card_expire_yy.configure(foreground="#000000")
        self.entry_card_expire_yy.configure(highlightbackground="#d9d9d9")
        self.entry_card_expire_yy.configure(highlightcolor="black")
        self.entry_card_expire_yy.configure(insertbackground="black")
        self.entry_card_expire_yy.configure(selectbackground="#c4c4c4")
        self.entry_card_expire_yy.configure(selectforeground="black")
        self.entry_card_expire_yy.configure(width=44)
        self.entry_card_expire_yy.bind('<FocusIn>', self.clear_widget)
        self.entry_card_expire_yy.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_card_expire_yy.bind('<Return>', self.checkout_card_event)
        self.entry_card_expire_yy.bind('<KeyRelease>', self.validate_entries)

        self.entry_card_cvv = tk.Entry(self.frame_checkout)
        self.entry_card_cvv.place(relx=0.092, rely=0.567, height=20, relwidth=0.351)
        self.entry_card_cvv.configure(background="white")
        self.entry_card_cvv.configure(disabledforeground="#a3a3a3")
        self.entry_card_cvv.configure(font="-family {Arial} -size 10 -weight bold")
        self.entry_card_cvv.configure(foreground="#000000")
        self.entry_card_cvv.configure(highlightbackground="#d9d9d9")
        self.entry_card_cvv.configure(highlightcolor="black")
        self.entry_card_cvv.configure(insertbackground="black")
        self.entry_card_cvv.configure(selectbackground="#c4c4c4")
        self.entry_card_cvv.configure(selectforeground="black")
        self.entry_card_cvv.configure(width=114)
        self.entry_card_cvv.bind('<FocusIn>', self.clear_widget)
        self.entry_card_cvv.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_card_cvv.bind('<Return>', self.checkout_card_event)
        self.entry_card_cvv.bind('<KeyRelease>', self.validate_entries)

        self.lbl_subtotal = tk.Label(self.frame_checkout)
        self.lbl_subtotal.place(relx=0.031, rely=0.63, height=27, width=94)
        self.lbl_subtotal.configure(activebackground="#f9f9f9")
        self.lbl_subtotal.configure(activeforeground="black")
        self.lbl_subtotal.configure(anchor='e')
        self.lbl_subtotal.configure(background="#d9d9d9")
        self.lbl_subtotal.configure(disabledforeground="#a3a3a3")
        self.lbl_subtotal.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_subtotal.configure(foreground="#000000")
        self.lbl_subtotal.configure(highlightbackground="#d9d9d9")
        self.lbl_subtotal.configure(highlightcolor="black")
        self.lbl_subtotal.configure(text='''Subtotal:''')

        self.lbl_subtotal_amount = tk.Label(self.frame_checkout)
        self.lbl_subtotal_amount.place(relx=0.338, rely=0.63, height=27, width=197)
        self.lbl_subtotal_amount.configure(activebackground="#f9f9f9")
        self.lbl_subtotal_amount.configure(activeforeground="black")
        self.lbl_subtotal_amount.configure(anchor='w')
        self.lbl_subtotal_amount.configure(background="#d9d9d9")
        self.lbl_subtotal_amount.configure(disabledforeground="#a3a3a3")
        self.lbl_subtotal_amount.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_subtotal_amount.configure(foreground="#000000")
        self.lbl_subtotal_amount.configure(highlightbackground="#d9d9d9")
        self.lbl_subtotal_amount.configure(highlightcolor="black")
        self.lbl_subtotal_amount.configure(text='''$10.00''')

        self.lbl_discount = tk.Label(self.frame_checkout)
        self.lbl_discount.place(relx=0.031, rely=0.677, height=27, width=94)
        self.lbl_discount.configure(activebackground="#f9f9f9")
        self.lbl_discount.configure(activeforeground="black")
        self.lbl_discount.configure(anchor='e')
        self.lbl_discount.configure(background="#d9d9d9")
        self.lbl_discount.configure(disabledforeground="#a3a3a3")
        self.lbl_discount.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_discount.configure(foreground="#000000")
        self.lbl_discount.configure(highlightbackground="#d9d9d9")
        self.lbl_discount.configure(highlightcolor="black")
        self.lbl_discount.configure(text='''Subtotal:''')

        self.lbl_discount_amount = tk.Label(self.frame_checkout)
        self.lbl_discount_amount.place(relx=0.338, rely=0.677, height=27
                , width=197)
        self.lbl_discount_amount.configure(activebackground="#f9f9f9")
        self.lbl_discount_amount.configure(activeforeground="black")
        self.lbl_discount_amount.configure(anchor='w')
        self.lbl_discount_amount.configure(background="#d9d9d9")
        self.lbl_discount_amount.configure(disabledforeground="#a3a3a3")
        self.lbl_discount_amount.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_discount_amount.configure(foreground="#000000")
        self.lbl_discount_amount.configure(highlightbackground="#d9d9d9")
        self.lbl_discount_amount.configure(highlightcolor="black")
        self.lbl_discount_amount.configure(text='''$8.00 (20% off)''')

        self.lbl_tax = tk.Label(self.frame_checkout)
        self.lbl_tax.place(relx=0.031, rely=0.724, height=27, width=94)
        self.lbl_tax.configure(activebackground="#f9f9f9")
        self.lbl_tax.configure(activeforeground="black")
        self.lbl_tax.configure(anchor='e')
        self.lbl_tax.configure(background="#d9d9d9")
        self.lbl_tax.configure(disabledforeground="#a3a3a3")
        self.lbl_tax.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_tax.configure(foreground="#000000")
        self.lbl_tax.configure(highlightbackground="#d9d9d9")
        self.lbl_tax.configure(highlightcolor="black")
        self.lbl_tax.configure(text='''Tax:''')

        self.lbl_tax_amount = tk.Label(self.frame_checkout)
        self.lbl_tax_amount.place(relx=0.338, rely=0.724, height=27, width=197)
        self.lbl_tax_amount.configure(activebackground="#f9f9f9")
        self.lbl_tax_amount.configure(activeforeground="black")
        self.lbl_tax_amount.configure(anchor='w')
        self.lbl_tax_amount.configure(background="#d9d9d9")
        self.lbl_tax_amount.configure(disabledforeground="#a3a3a3")
        self.lbl_tax_amount.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_tax_amount.configure(foreground="#000000")
        self.lbl_tax_amount.configure(highlightbackground="#d9d9d9")
        self.lbl_tax_amount.configure(highlightcolor="black")
        self.lbl_tax_amount.configure(text='''$0.44 (5.5% Tax)''')

        self.lbl_total_amount = tk.Label(self.frame_checkout)
        self.lbl_total_amount.place(relx=0.338, rely=0.772, height=27, width=197)
        self.lbl_total_amount.configure(activebackground="#f9f9f9")
        self.lbl_total_amount.configure(activeforeground="black")
        self.lbl_total_amount.configure(anchor='w')
        self.lbl_total_amount.configure(background="#d9d9d9")
        self.lbl_total_amount.configure(disabledforeground="#a3a3a3")
        self.lbl_total_amount.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_total_amount.configure(foreground="#000000")
        self.lbl_total_amount.configure(highlightbackground="#d9d9d9")
        self.lbl_total_amount.configure(highlightcolor="black")
        self.lbl_total_amount.configure(text='''$8.44''')

        self.lbl_total = tk.Label(self.frame_checkout)
        self.lbl_total.place(relx=0.031, rely=0.772, height=27, width=94)
        self.lbl_total.configure(activebackground="#f9f9f9")
        self.lbl_total.configure(activeforeground="black")
        self.lbl_total.configure(anchor='e')
        self.lbl_total.configure(background="#d9d9d9")
        self.lbl_total.configure(disabledforeground="#a3a3a3")
        self.lbl_total.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_total.configure(foreground="#000000")
        self.lbl_total.configure(highlightbackground="#d9d9d9")
        self.lbl_total.configure(highlightcolor="black")
        self.lbl_total.configure(text='''Total:''')

        self.lbl_checkout_options = tk.Label(self.frame_checkout)
        self.lbl_checkout_options.place(relx=0.092, rely=0.835, height=31
                , width=174)
        self.lbl_checkout_options.configure(activebackground="#f9f9f9")
        self.lbl_checkout_options.configure(activeforeground="black")
        self.lbl_checkout_options.configure(background="#d9d9d9")
        self.lbl_checkout_options.configure(disabledforeground="#a3a3a3")
        self.lbl_checkout_options.configure(font="-family {Franklin Gothic Heavy} -size 15 -underline 1")
        self.lbl_checkout_options.configure(foreground="#000000")
        self.lbl_checkout_options.configure(highlightbackground="#d9d9d9")
        self.lbl_checkout_options.configure(highlightcolor="black")
        self.lbl_checkout_options.configure(text='''Checkout Options''')

        self.lbl_card_brand = tk.Label(self.frame_checkout)
        self.lbl_card_brand.place(relx=0.492, rely=0.551, height=51, width=134)
        self.lbl_card_brand.configure(anchor='nw')
        self.lbl_card_brand.configure(background="#d9d9d9")
        self.lbl_card_brand.configure(disabledforeground="#a3a3a3")
        self.lbl_card_brand.configure(foreground="#000000")
        self.lbl_card_brand.configure(text='')
        self.lbl_card_brand.configure(width=134)
        self.lbl_card_brand.configure(wraplength="134")

        self.btn_debit_credit_card = tk.Button(self.frame_checkout)
        self.btn_debit_credit_card.place(relx=0.062, rely=0.898, height=54, width=277)
        self.btn_debit_credit_card.configure(activebackground="#ececec")
        self.btn_debit_credit_card.configure(activeforeground="#000000")
        self.btn_debit_credit_card.configure(background="#d9d9d9")
        self.btn_debit_credit_card.configure(disabledforeground="#a3a3a3")
        self.btn_debit_credit_card.configure(font="-family {Franklin Gothic Heavy} -size 20")
        self.btn_debit_credit_card.configure(foreground="#000000")
        self.btn_debit_credit_card.configure(highlightbackground="#d9d9d9")
        self.btn_debit_credit_card.configure(highlightcolor="black")
        self.btn_debit_credit_card.configure(pady="0")
        self.btn_debit_credit_card.configure(takefocus="0")
        self.btn_debit_credit_card.configure(text='''Debit/Credit Card''')

        # ------------------------------------------------------------------
        # All Button Commands
        self.btn_prev_page.configure(command=self.goto_prev_page)
        self.btn_next_page.configure(command=self.goto_next_page)
        self.btn_apply_promo.configure(command=lambda: self.apply_promo(None))
        self.btn_debit_credit_card.configure(command=self.checkout_card)
        tcl_update_page = self.register(self.update_page)
        self.spinbox_page.configure(command=(tcl_update_page, '%d'))

        # Other
        self.initialization()
        self.display_cart_list()

    def initialization(self):
        """
        Initialize this home page.
        """
        self.reset_defaults()
        self.refresh_user_cart()

    def reconnect_database_conn(self):
        """
        Reconnect to the database.
        """
        self.conn = sqlite3.connect("ShoppingCart.db")
        self.cursor = self.conn.cursor()

    def update_page(self, event):
        """
        Updates the page number.
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        try:
            self.current_page = int(self.spinbox_page.get())
        except:
            if self.spinbox_page.get() != "":
                self.current_page = 1
            else:
                return

        if self.current_page < 1:
            self.current_page = 1

        if self.current_page > self.MAX_PAGES:
            self.current_page = self.MAX_PAGES

        self.refresh_user_cart()

    def clear_widget(self, event):
        """
        Clear the following widgets coded below when they are clicked on.
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """

        foreground_color = "#000000"
        background_color = "white"

        if self.entry_address == self.top_frame.focus_get() and self.entry_address.get() == 'Shipping Address':
            self.entry_address.delete(0, END)
            self.entry_address.configure(foreground=foreground_color, background=background_color)
        if self.entry_city == self.top_frame.focus_get() and self.entry_city.get() == 'City':
            self.entry_city.delete(0, END)
            self.entry_city.configure(foreground=foreground_color, background=background_color)
        if self.entry_state == self.top_frame.focus_get() and self.entry_state.get() == 'State':
            self.entry_state.delete(0, END)
            self.entry_state.configure(foreground=foreground_color, background=background_color)
        if self.entry_country == self.top_frame.focus_get() and self.entry_country.get() == 'Country':
            self.entry_country.delete(0, END)
            self.entry_country.configure(foreground=foreground_color, background=background_color)
        if self.entry_zip_code == self.top_frame.focus_get() and self.entry_zip_code.get() == 'ZIP Code':
            self.entry_zip_code.delete(0, END)
            self.entry_zip_code.configure(foreground=foreground_color, background=background_color)
        if self.entry_card_number == self.top_frame.focus_get() \
                and self.entry_card_number.get() == 'Debit/Credit Card Number':
            self.entry_card_number.delete(0, END)
            self.entry_card_number.configure(foreground=foreground_color, background=background_color)
        if self.entry_card_expire_mm == self.top_frame.focus_get() \
                and self.entry_card_expire_mm.get() == 'mm':
            self.entry_card_expire_mm.delete(0, END)
            self.entry_card_expire_mm.configure(foreground=foreground_color, background=background_color)
        if self.entry_card_expire_yy == self.top_frame.focus_get() \
                and self.entry_card_expire_yy.get() == 'yy':
            self.entry_card_expire_yy.delete(0, END)
            self.entry_card_expire_yy.configure(foreground=foreground_color, background=background_color)
        if self.entry_card_cvv == self.top_frame.focus_get() and self.entry_card_cvv.get() == 'CVV':
            self.entry_card_cvv.delete(0, END)
            self.entry_card_cvv.configure(foreground=foreground_color, background=background_color)

    # TODO ensure that the event argument is used, or remove it
    def repopulate_defaults(self, event):
        """
        Repopulate the following widgets coded below when they are not focused on.
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """

        foreground_color = "#8c8c8c"

        if self.entry_address != self.top_frame.focus_get() and self.entry_address.get() == '':
            self.entry_address.insert(0, 'Shipping Address')
            self.entry_address.configure(foreground=foreground_color)
        if self.entry_city != self.top_frame.focus_get() and self.entry_city.get() == '':
            self.entry_city.insert(0, 'City')
            self.entry_city.configure(foreground=foreground_color)
        if self.entry_state != self.top_frame.focus_get() and self.entry_state.get() == '':
            self.entry_state.insert(0, 'State')
            self.entry_state.configure(foreground=foreground_color)
        if self.entry_country != self.top_frame.focus_get() and self.entry_country.get() == '':
            self.entry_country.insert(0, 'Country')
            self.entry_country.configure(foreground=foreground_color)
        if self.entry_zip_code != self.top_frame.focus_get() and self.entry_zip_code.get() == '':
            self.entry_zip_code.insert(0, 'ZIP Code')
            self.entry_zip_code.configure(foreground=foreground_color)
        if self.entry_card_number != self.top_frame.focus_get() and self.entry_card_number.get() == '':
            self.entry_card_number.insert(0, 'Debit/Credit Card Number')
            self.entry_card_number.configure(foreground=foreground_color)
        if self.entry_card_expire_mm != self.top_frame.focus_get() and self.entry_card_expire_mm.get() == '':
            self.entry_card_expire_mm.insert(0, 'mm')
            self.entry_card_expire_mm.configure(foreground=foreground_color)
        if self.entry_card_expire_yy != self.top_frame.focus_get() and self.entry_card_expire_yy.get() == '':
            self.entry_card_expire_yy.insert(0, 'yy')
            self.entry_card_expire_yy.configure(foreground=foreground_color)
        if self.entry_card_cvv != self.top_frame.focus_get() and self.entry_card_cvv.get() == '':
            self.entry_card_cvv.insert(0, 'CVV')
            self.entry_card_cvv.configure(foreground=foreground_color)

    # Reset all Entry widgets to their default texts.
    def reset_defaults(self):
        """
        Reset the following widgets coded below to their default values.
        """
        self.entry_address.delete(0, END)
        self.entry_city.delete(0, END)
        self.entry_state.delete(0, END)
        self.entry_country.delete(0, END)
        self.entry_zip_code.delete(0, END)
        self.entry_card_number.delete(0, END)
        self.entry_card_expire_mm.delete(0, END)
        self.entry_card_expire_yy.delete(0, END)
        self.entry_card_cvv.delete(0, END)
        self.entry_address.insert(0, 'Shipping Address')
        self.entry_city.insert(0, 'City')
        self.entry_state.insert(0, 'State')
        self.entry_country.insert(0, 'Country')
        self.entry_zip_code.insert(0, 'ZIP Code')
        self.entry_card_number.insert(0, 'Debit/Credit Card Number')
        self.entry_card_expire_mm.insert(0, 'mm')
        self.entry_card_expire_yy.insert(0, 'yy')
        self.entry_card_cvv.insert(0, 'CVV')

        foreground_color = "#8c8c8c"

        self.entry_address.configure(foreground=foreground_color)
        self.entry_city.configure(foreground=foreground_color)
        self.entry_state.configure(foreground=foreground_color)
        self.entry_country.configure(foreground=foreground_color)
        self.entry_zip_code.configure(foreground=foreground_color)
        self.entry_card_number.configure(foreground=foreground_color)
        self.entry_card_expire_mm.configure(foreground=foreground_color)
        self.entry_card_expire_yy.configure(foreground=foreground_color)
        self.entry_card_cvv.configure(foreground=foreground_color)

    def is_valid_card_number(self, card_number):
        """
        Returns 'True' if the sequence is a valid debit/credit card number.

        A valid card number...
        - Must contain exactly 16 digits,
        - Must start with a 4, 5 or 6
        - Must only consist of digits (0-9) or hyphens '-',
        - May have digits in groups of 4, separated by one hyphen "-".
        - Must NOT use any other separator such as ' ' , '_',
        - Must NOT have 4 or more consecutive repeated digits.
        """

        # -? means a hyphen there is optional.
        # ([456][0-9]{3})-?     --> 4### ---> 5### ---> 6###
        # ([0-9]{4})-?          --> ####
        # ([0-9]{4})-?          --> ####
        # ([0-9]{4})$           --> ####
        pattern = '^([456][0-9]{3})-?([0-9]{4})-?([0-9]{4})-?([0-9]{4})$'
        match = re.match(pattern, card_number)

        if match is None:
            return False

        for group in match.groups():
            if group[0] * 4 == group:
                return False
        return True

    def get_card_brand(self, card_number):
        """
        Returns a String:
        - "Visa": if the card number starts with 4.
        - "MasterCard": if the card number starts with 5.
        - "Discover": if the card number starts with 6.
        """
        pattern = '[456]'
        match = re.match(pattern, card_number)

        if match is None:
            return ""

        number = match.group()
        # print(match)
        if number == '4':  # Visa
            return "Visa"
        elif number == '5':  # MasterCard
            return "MasterCard"
        elif number == '6':  # Discover
            return "Discover"
        else:  # Card Number is invalid or not supported.
            return ""

    def validate_entries(self, event):
        """
        Validate user entries when they type and release a key in the entry boxes.

            Currently validating:
            - ZIP Code
            - Card Expiration Date MM
            - Card Expiration Date YY
            - CVV

            Will call methods to calculate:
            - Tax Rate, using the ZIP Code. (Using method, "get_tax_rate()")

        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        zip_code = self.entry_zip_code.get()
        card_number = self.entry_card_number.get()
        expire_mm = self.entry_card_expire_mm.get()
        expire_yy = self.entry_card_expire_yy.get()
        cvv = self.entry_card_cvv.get()

        # ZIP Code: Allow only 5 characters, only numbers allowed.
        if re.search("[^0-9]", zip_code) and self.entry_zip_code.get() != "ZIP Code":
            zip_code = re.sub("[^0-9]", "", zip_code)
            self.entry_zip_code.delete(0, END)
            self.entry_zip_code.insert(0, zip_code)
        if len(zip_code) > 5 and self.entry_zip_code.get() != 'ZIP Code':
            zip_code = zip_code[:5]
            self.entry_zip_code.delete(0, END)
            self.entry_zip_code.insert(0, zip_code)
        elif len(zip_code) == 5 and self.entry_zip_code == self.top_frame.focus_get():

            ###########################
            ### Calculate tax rate. ###
            if event is not None and event.char != '\r':  # This should not be ran when releasing return/enter.
                self.tax_rate = self.get_tax_rate(zip_code)
                self.update_totals()  # Update GUI.
                return
        elif len(zip_code) < 5 and self.entry_zip_code:
            self.tax_rate = 0.0
            self.update_totals()

        # Card Number: Allow only numbers. Get card Brand, reset background color to white if a key is not pressed.
        if re.search("[^0-9-]", card_number) and self.entry_card_number.get() != "Debit/Credit Card Number":
            card_number = re.sub("[^0-9-]", "", card_number)
            self.entry_card_number.delete(0, END)
            self.entry_card_number.insert(0, card_number)
        self.lbl_card_brand.configure(text=self.get_card_brand(card_number))
        if event is not None:
            self.entry_card_number.configure(background="white")

        # Card Expire Date mm: Allow only 2 characters, only numbers allowed. Range from 01 to 12
        if len(expire_mm) > 2:
            expire_mm = expire_mm[:2]
            self.entry_card_expire_mm.delete(0, END)
            self.entry_card_expire_mm.insert(0, expire_mm)
        try:
            if re.search("[^0-9]", expire_mm) and self.entry_card_expire_mm.get() != "mm":
                expire_mm = re.sub("[^0-9]", "", expire_mm)
                self.entry_card_expire_mm.delete(0, END)
                self.entry_card_expire_mm.insert(0, expire_mm)
            elif len(expire_mm) > 2 and int(expire_mm) < 1:
                self.entry_card_expire_mm.delete(0, END)
                self.entry_card_expire_mm.insert(0, "01")
            elif int(expire_mm) > 12:
                self.entry_card_expire_mm.delete(0, END)
                self.entry_card_expire_mm.insert(0, 12)
        except:
            pass

        # Card Expire Date yy: Allow only 2 characters, only numbers allowed. Range from 00 to 99
        if len(expire_yy) > 2:
            expire_yy = expire_yy[:2]
            self.entry_card_expire_yy.delete(0, END)
            self.entry_card_expire_yy.insert(0, expire_yy)
        try:
            if re.search("[^0-9]", expire_yy) and self.entry_card_expire_yy.get() != "yy":
                expire_yy = re.sub("[^0-9]", "", expire_yy)
                self.entry_card_expire_yy.delete(0, END)
                self.entry_card_expire_yy.insert(0, expire_yy)
            elif int(expire_yy) < 00:
                self.entry_card_expire_yy.delete(0, END)
                self.entry_card_expire_yy.insert(0, 00)
            elif int(expire_yy) > 99:
                self.entry_card_expire_yy.delete(0, END)
                self.entry_card_expire_yy.insert(0, 99)
        except:
            pass

        # CVV: Allow only 3 characters, only numbers allowed.
        if re.search("[^0-9]", cvv) and self.entry_card_cvv.get() != "CVV":
            cvv = re.sub("[^0-9]", "", cvv)
            self.entry_card_cvv.delete(0, END)
            self.entry_card_cvv.insert(0, cvv)
        if len(cvv) > 3:
            cvv = cvv[:3]
            self.entry_card_cvv.delete(0, END)
            self.entry_card_cvv.insert(0, cvv)

    def get_tax_rate(self, zip_code):
        """
        Get the current tax rate based on the ZIP code given.
        :param zip_code: ZIP Code area.
        :return: Returns the tax rate. If an invalid ZIP code is given, the 0.0 will be the returned tax rate.
        """
        try:
            rates = self.client.rates_for_location(zip_code)
            t_rate = rates.combined_rate
        except taxjar.exceptions.TaxJarResponseError:
            t_rate = 0.0
            tk.messagebox.showinfo("Invalid ZIP Code",
                                   "Cannot find a state tax. \r\nPlease type in a valid ZIP code.",
                                   icon="error")
        return t_rate

    def checkout_card_event(self, event):
        """
        Perform a checkout via Tkinter's Entry event.

        Pre-condition: 1 or more items must be in the user's shopping cart.
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        self.checkout_card()

    def checkout_card(self):
        """
        Perform a checkout.

        Pre-condition: 1 or more items must be in the user's shopping cart.
        """

        # Pre-condition: 1 or more items must be in the user's shopping cart.
        if self.MAX_AMOUNT_OF_ITEMS <= 0:
            tk.messagebox.showinfo("Checkout Cancelled",
                                   "You have no items in your Shopping Cart.",
                                   icon="info")
            return

        # Get shipping information from checkout.
        address1 = self.entry_address.get()
        city = self.entry_city.get()
        state = self.entry_state.get()
        country = self.entry_country.get()
        zip_code = self.entry_zip_code.get()


        # Get user-input card information.
        card_number = self.entry_card_number.get()
        expire_mm = self.entry_card_expire_mm.get()
        expire_yy = self.entry_card_expire_yy.get()
        cvv = self.entry_card_cvv.get()

        # VALIDATE user input.
        input_is_invalid = False
        background_color_invalid = "#b00020"
        background_color_valid = "white"

        # self.btn_debit_credit_card.focus()
        self.validate_entries(None)

        if address1 == "" or address1 == "Shipping Address":
            input_is_invalid = True
            self.entry_address.configure(background=background_color_invalid)
        if city == "" or city == "City":
            input_is_invalid = True
            self.entry_city.configure(background=background_color_invalid)
        if state == "" or state == "State":
            input_is_invalid = True
            self.entry_state.configure(background=background_color_invalid)
        if country == "" or country == "Country":
            input_is_invalid = True
            self.entry_country.configure(background=background_color_invalid)
        if zip_code == "" or zip_code == "ZIP Code":
            input_is_invalid = True
            self.entry_zip_code.configure(background=background_color_invalid)
        if card_number == "" or card_number == "Debit/Credit Card Number":
            input_is_invalid = True
            self.entry_card_number.configure(background=background_color_invalid)
        if expire_mm == "" or expire_mm == "mm":
            input_is_invalid = True
            self.entry_card_expire_mm.configure(background=background_color_invalid)
        if expire_yy == "" or expire_yy == "yy":
            input_is_invalid = True
            self.entry_card_expire_yy.configure(background=background_color_invalid)
        if cvv == "" or cvv == "CVV":
            input_is_invalid = True
            self.entry_card_cvv.configure(background=background_color_invalid)

        if input_is_invalid:
            tk.messagebox.showinfo("Missing Requirements",
                                   "Please fill out the missing requirements highlighted in red.",
                                   icon="error")
            return

        # Validate the debit/credit card number.
        if not self.is_valid_card_number(card_number):
            # IF NOT VALID: Wrong.
            tk.messagebox.showinfo("Invalid Debit/Credit Card Number",
                                   "The Debit/Credit Card number you typed is not a valid card number.",
                                   icon="error")
            self.entry_card_number.configure(background=background_color_invalid)
            return
        else:
            self.entry_card_number.configure(background=background_color_valid)

        # Validate CVV again
        if len(cvv) < 3:
            tk.messagebox.showinfo("Invalid CVV",
                                   "The CVV you typed is not valid.",
                                   icon="error")
            self.entry_card_cvv.configure(background=background_color_invalid)
            return
        else:
            self.entry_card_cvv.configure(background=background_color_valid)

        # Calculate Tax Rate at checkout.
        self.tax_rate = self.get_tax_rate(zip_code)
        self.update_totals()  # Update GUI.

        if self.tax_rate == 0.0:
            return

        ### Check out with Debit/Credit Card. ###
        if tk.messagebox.askyesno("Checkout with Debit/Credit Card",
                                  "Your final total is ${}. Is this okay?".format(str("{:.2f}".format(self.total))),
                                  icon="question"):
            # Yes. (Continue with Checkout)

            # AID Algorithm (Get an AID)
            self.reconnect_database_conn()
            self.cursor.execute("SELECT MAX(AID) FROM Addresses")
            rowid = self.cursor.fetchall()[0][0]

            if rowid is not None:
                aid = rowid
                aid += 1  # Increment to a new AID.
            else:
                aid = 0

            # Insert AID and other info into database.
            self.cursor.execute("INSERT INTO Addresses ('AID', 'Address1', 'City', 'State', 'Country', 'Zipcode') "
                                "VALUES ({}, '{}', '{}', '{}', '{}', '{}');"
                                .format(aid, address1, city, state, country, zip_code))

            # Save card information.
            try:
                self.cursor.execute("INSERT INTO CreditCard ('CardNumber', 'CVV', 'ExpDate', 'AID') "
                                    "VALUES ({}, '{}', '{}', '{}');"
                                    .format(card_number, cvv, "{}/{}".format(expire_mm, expire_yy), aid))
            except:
                self.cursor.execute("UPDATE CreditCard "
                                    "SET CardNumber = '{}', CVV = '{}', ExpDate = '{}', AID = {} "
                                    .format(card_number, cvv, "{}/{}".format(expire_mm, expire_yy), aid)
                                    + "WHERE CardNumber == '{}'".format(card_number))

            # Insert Purchase info into database.
            time = datetime.datetime.now()
            today = time.strftime("%Y-%m-%d")
            self.cursor.execute("INSERT INTO Purchases "
                                "('Username', 'date', 'AID', 'CID', 'Total', 'TotalAfterTax') "
                                "VALUES ('{}', '{}', {}, {}, {}, {});"
                                .format(self.top_frame.username, today,
                                        aid, self.top_frame.cid, self.discount, self.total_rounded))

            # Decrement product quantity left the quantity of products the user bought.
            # (QuantityLeft - QuantityBought)
            for item in self.list_of_itemboxes:
                self.cursor.execute("UPDATE Products "
                                    "SET Quantity = CASE "
                                    "WHEN Quantity >= {} THEN Quantity - {}".format(item.quantity, item.quantity) +
                                    " END "
                                    "WHERE PID = {}".format(item.pid))

            # Clear all active promos.
            self.top_frame.active_promos.clear()

            # Let user know that their checkout is complete.
            tk.messagebox.showinfo("Checkout Completed",
                                   "The checkout was successful, thank you for your purchase.",
                                   icon="info")

            # Reset entries and go back to the home page.
            self.reset_defaults()
            self.top_frame.goto_home_page()

            # Change cart CheckedOut status to "pending" by setting it to True (Representated by a 0 inside SQLite3).
            # Also create them a new CID.
            self.cursor.execute("UPDATE Cart "
                                "SET CheckedOut = 1 "
                                "WHERE CID = {} AND Username = '{}'"
                                .format(self.top_frame.cid, self.top_frame.username))

            # Commit all database changes.
            self.conn.commit()
            self.reconnect_database_conn()

            # Refresh the cart page.
            self.refresh_user_cart()

            # Update the product quantity
            self.top_frame.browse()

        else:
            # No. (Checkout is cancelled)
            tk.messagebox.showinfo("Checkout Cancelled",
                                   "The checkout was cancelled.",
                                   icon="info")

    def apply_promo(self, event):
        """
        Applies a promotion code if valid.
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        # Take user input of their promo code.
        promo_id = self.entry_promotion_code.get()

        # Get row from Promotions table containing the given PromoID.
        self.cursor.execute("SELECT * FROM Promotions WHERE PromoID = '{}'".format(promo_id))
        database_promotions_row = self.cursor.fetchone()

        # Determine if the promotion code/ID is valid.
        time = datetime.datetime.now()
        today = time.strftime("%Y-%m-%d")

        # If the promotion exists, do the following below.
        if database_promotions_row is not None:

            # Get dates.
            today = time.strptime(today, "%Y-%m-%d")
            start_date = time.strptime(database_promotions_row[1], "%Y-%m-%d")
            end_date = time.strptime(database_promotions_row[2], "%Y-%m-%d")

            # If the promotion is between the start/end date, apply the promotion.
            if start_date <= today <= end_date:

                pid = database_promotions_row[4]
                
                if int(pid) not in self.top_frame.active_promos:
                    self.top_frame.active_promos.append(int(pid))
                # print("Active promos:", self.top_frame.active_promos)

                self.cursor.execute("UPDATE CartItems "
                                    + "SET PromoID = '{}' ".format(promo_id)
                                    + "WHERE CID = '{}' AND PID = '{}'".format(self.top_frame.cid, pid))

                self.conn.commit()  # Commit the changes.
                self.reconnect_database_conn()

                tk.messagebox.showinfo("Promotion Code", "The promotion code was successfully applied.", icon="info")

                # Update and refresh the cart page.
                self.entry_promotion_code.delete(0, END)
                # self.entry_promotion_code.insert(0, '')
                self.update_totals()
                self.refresh_user_cart()

            # Else, tell the user that promotion code has expired.
            else:
                tk.messagebox.showwarning("Promotion Code Expired",
                                          "The promotion code, {}, expired on {}. \r\n"
                                          "\r\nToday's Date: \t[ {} ] "
                                          "\r\n\r\nStartDate: \t[ {} ] \r\nEndDate: \t[ {} ]"
                                          .format(promo_id, end_date, today, start_date, end_date), icon="error")

        # If the promotion does NOT exist, tell the user that this promotion code is invalid.
        else:
            if promo_id != "":
                tk.messagebox.showwarning("Promotion Code Invalid",
                                          "The promotion code, {}, is not valid."
                                          .format(promo_id), icon="error")
            else:
                tk.messagebox.showwarning("Promotion Code Invalid",
                                          "The promotion code is not valid."
                                          .format(promo_id), icon="error")

    def update_totals(self):
        """
        Updates all itembox totals and checkout totals.
        """
        # Update the messages and header.
        self.subtotal = 0

        # Update all itembox subtotals with discounts. Apply Promotion also.
        for itembox in self.list_of_itemboxes:
            self.subtotal += itembox.price * itembox.quantity

            # Check if user applied promos.
            self.cursor.execute("SELECT * FROM Promotions")
            database_promo_table = self.cursor.fetchall()

            stop_loop = False
            for x in database_promo_table:
                if stop_loop:
                    break

                promo_id = x[0]
                start_date = x[1]
                end_date = x[2]
                discount = x[3]
                pid = x[4]

                self.cursor.execute("SELECT * FROM CartItems WHERE PromoID = '{}'".format(promo_id))
                cart_items = self.cursor.fetchall()

                for c_item in cart_items:
                    if stop_loop:
                        break

                    if (str(c_item[4]) == str(promo_id)) \
                            and (str(pid) == str(itembox.pid)) \
                            and (int(pid) in self.top_frame.active_promos):
                        itembox.enable_discount(1, discount)

                        # Stop for-loop to prevent this itembox disabling its discount_rate calculations in the else block.
                        stop_loop = True
                    else:
                        itembox.disable_discount()

        # Calculate a new Subtotal for all cart items.
        second_subtotal = 0.00
        added_discounts = 0.00
        was_something_discounted = False
        for itembox in self.list_of_itemboxes:
            if itembox.is_discounted:
                added_discounts += itembox.discounted_price
                was_something_discounted = True
            else:
                second_subtotal += itembox.price * itembox.quantity

        # Calculate a new Subtotal with the discounted price.
        self.discount = second_subtotal + added_discounts

        # Send Subtotals/Discounts to Tkinter GUI.
        if was_something_discounted:
            self.lbl_subtotal.configure(text="Subtotal:")
            self.lbl_subtotal_amount.configure(text="${}".format(str("{:.2f}".format(self.subtotal))))
            self.lbl_discount_amount.configure(text="${} (With Promos)"
                                               .format(str("{:.2f}".format(self.discount))))
        else:
            self.lbl_subtotal.configure(text="")
            self.lbl_subtotal_amount.configure(text="")
            self.lbl_discount_amount.configure(text="${}".format(str("{:.2f}".format(self.subtotal))))

        # Calculate Tax based on the tax rate provided.
        # (TAX_RATE is updated in methods:
        #       "validate_entries", "checkout_card")
        self.tax = (self.tax_rate) * (self.discount)

        # Calculate Final Total.
        self.total = (1 + self.tax_rate) * (self.discount)
        self.total_rounded = Decimal("{:.2f}".format(self.total))

        # Update GUI Widgets below.
        self.lbl_tax_amount.configure(text="${} ({}% Tax)"
                                      .format(str("{:.2f}".format(self.tax)),
                                              str("{}".format(round(self.tax_rate * 100, 14)))
                                              )
                                      )

        self.lbl_total_amount.configure(text="${}"
                                        .format(self.total_rounded))

    def refresh_user_cart(self):
        """
        Refresh this page.
        """

        # TODO: Escape special characters from "search_text" to prevent SQL Injection.
        # Get CID of the user.
        self.cursor.execute("SELECT CID FROM Cart WHERE Username == '{}' AND CheckedOut == 0"
                            .format(self.top_frame.username))
        rows = self.cursor.fetchone()

        if rows:
            cid = rows[0]
        else:
            # Clear the display if the user has no cart id.
            # Also return and update_totals the page.
            self.display_list.clear()

            self.lbl_message.configure(text='{} Items Found In Cart.'.format(0))
            self.top_frame.header.set_lbl_view_cart_amount(0)
            self.display_cart_list()
            self.update_totals()
            return

        # Clear the display_list.
        self.display_list.clear()

        # Get all items that are attached to this particular CID number.
        self.cursor.execute("SELECT * FROM CartItems WHERE CID = {}".format(cid))
        self.display_list = self.cursor.fetchall()

        # Check if items are active. Remove them if the product is inactive.
        # for item in self.display_list:
        #     pid = item[2]
        #     self.cursor.execute("SELECT Active FROM Products WHERE PID = {}".format(pid))
        #     product = self.cursor.fetchone()
        #
        #     if product:
        #         is_active = product[0]
        #         if is_active == 0:
        #             self.display_list.remove(item)
        #             self.cursor.execute("DELETE FROM CartItems WHERE PID = {}".format(pid))

        # Set attributes to help with displaying items. (Calculate and store the max items and max pages)
        self.MAX_AMOUNT_OF_ITEMS = len(self.display_list)
        self.MAX_PAGES = math.ceil(len(self.display_list) / 3.0)

        if self.current_page > self.MAX_PAGES:
            self.current_page = 1

        self.cursor.execute("SELECT sum(Quantity) FROM CartItems WHERE CID = {}".format(cid))
        items_in_cart = self.cursor.fetchone()[0]

        if items_in_cart is None:
            items_in_cart = 0

        # Display the products/items.
        self.lbl_message.configure(text='{} Items Found In Cart.'.format(items_in_cart))
        self.top_frame.header.set_lbl_view_cart_amount(items_in_cart)
        self.display_cart_list()
        self.update_totals()

    def display_cart_list(self):
        """
        Display products/items, which are on the "display_list".

        Currently can display 3 products/items at a time.
        """

        if DEBUG:
            print("___ Display Items On Browsing Page ___")

        # Remove old itemboxes.
        for itembox in self.list_of_itemboxes:
            itembox.destroy()
        self.list_of_itemboxes.clear()

        # Create all itemboxes for the user's cart.
        for i in range(0, len(self.display_list)):

            # Break from the loop when indexing beyond the list size/length.
            if i >= len(self.display_list):
                break

            row = self.display_list[i]
            # print("{}, {}, {}, {}, {}".format(row[0], row[1], row[2], row[3], row[4]))

            relative_y = -1
            cart_item_id = row[0]
            cid = row[1]
            pid = row[2]
            quantity = row[3]
            promo_id = str(row[4])

            self.cursor.execute("SELECT * FROM Products WHERE PID = {} AND Active == 1".format(pid))
            products_row = None
            try:
                products_row = self.cursor.fetchall()[0]
            except:
                return

            # print("{}, {}, {}, {}, {}, {}".format(products_row[0], products_row[1], products_row[2], products_row[3],
            #                                       products_row[4], products_row[5]))

            name = str(products_row[1])
            category = str(products_row[2])
            price = products_row[3]
            quantity_left = products_row[4]
            info = str(products_row[5])
            image_blob = products_row[6]

            # Extract image data.
            image_data = image_blob
            with open(os.path.join("Images", "temp_image.jpeg"), 'wb') as f:
                f.write(image_data)
            f.close()

            image = os.path.join("Images", "temp_image.jpeg")

            # Create an itembox.
            itembox = CartItemBox(self.top_frame,
                                  self.frame_cart,
                                  relative_y,
                                  cart_item_id,
                                  cid,
                                  pid,
                                  quantity,
                                  promo_id,
                                  name,
                                  category,
                                  price,
                                  quantity_left,
                                  info,
                                  image)

            # Add to the itembox list.
            self.list_of_itemboxes.append(itembox)

        # Display only 3 itemboxes.
        #       (Should only create 1 to 3 rows per page currently)
        box_position_mult = 0
        c_page = self.current_page
        max_items = self.MAX_ITEMS_PER_PAGE
        for i in range((c_page - 1) * max_items, c_page * max_items):

            # Break from the loop when indexing beyond the list size/length.
            if i >= len(self.display_list):
                break

            row = self.display_list[i]
            # print("{}, {}, {}, {}, {}".format(row[0], row[1], row[2], row[3], row[4]))

            relative_y = 0.065 + box_position_mult * 0.2800  # This math determines the proper y placement of each box.
            self.list_of_itemboxes[i].set_relative_y(relative_y)

            box_position_mult += 1

        # Display products/items based on the current page the user is on.
        if self.current_page <= 1:
            self.btn_prev_page.configure(state='disabled')
        else:
            self.btn_prev_page.configure(state='normal')

        if self.current_page >= self.MAX_PAGES:
            self.btn_next_page.configure(state='disabled')
        else:
            self.btn_next_page.configure(state='normal')

        if len(self.display_list) <= 0:
            self.spinbox_page.configure(state='disabled')
        else:
            self.spinbox_page.configure(state='normal')

        self.spinbox_page.delete(0, END)
        self.spinbox_page.insert(0, str(self.current_page))

    def goto_prev_page(self):
        """
        Display the Previous page of products.
        """
        if DEBUG: print("___prev_page___")
        if self.current_page > 1:
            self.current_page -= 1
            self.refresh_user_cart()

    def goto_next_page(self):
        """
        Display the Next page of products.
        """
        if DEBUG: print("___next_page___")
        if self.current_page < self.MAX_PAGES:
            self.current_page += 1
            self.refresh_user_cart()


###########################################################

class CartItemBox(tk.Frame):
    """
    This is an ItemBox that will store products to be used for the browsing page.
    The functions are below.

    :param main_frame: Main Frame (Must be a MainFrame instance in 'ShoppingCart.py')
    :param top_frame: The Frame this will be attached to.
    :param relative_y: Relative Y position of this Tkinter Frame.
    :param cart_item_id: CartItemID
    :param cid: CID (Cart ID)
    :param pid: PID (Product ID)
    :param quantity: Amount that the customer will buy. How much of this product the user is going to buy.
    :param promo_id: PromoID (Promotion ID)
    :param name: Name of the product.
    :param category: "New" or "Used" product.
    :param price: The Product's price.
    :param info: Information about the product/item.
    :param image: A path to the image that will be used.

    """

    def __init__(self,
                 main_frame=None,
                 top_frame=None,
                 relative_y=0,
                 cart_item_id=0,
                 cid=0,
                 pid=0,
                 quantity=0,
                 promo_id=0,
                 name="",
                 category="",
                 price=0.00,
                 quantity_left=0,
                 info="",
                 image="",
                 *args, **kwargs):

        tk.Frame.__init__(self, *args, **kwargs)

        ### Attributes ###
        self.main_frame = main_frame
        self.top_frame = top_frame
        self.relative_y = relative_y
        self.cart_item_id = cart_item_id
        self.cid = cid
        self.pid = pid
        self.quantity = quantity
        self.promo_id = promo_id
        self.name = name
        self.category = category
        self.price = price
        self.quantity_left = quantity_left
        self.info = info
        try:
            img = Image.open(image)
            img = img.resize((128, 128), Image.ANTIALIAS)
            self.image = ImageTk.PhotoImage(img)
        except:
            pass

        self.is_discounted = False
        self.discounted_price = 0.00
        self.discounted_rate = 0.00

        self.conn = sqlite3.connect("ShoppingCart.db")
        self.cursor = self.conn.cursor()

        ### Widgets ###
        self.lblframe_item1 = tk.LabelFrame(self.top_frame)
        #self.lblframe_item1.place(relx=0.044, rely=0.063, relheight=0.276, relwidth=0.904)
        self.lblframe_item1.place(relx=0.044, rely=relative_y, relheight=0.276, relwidth=0.904)
        self.lblframe_item1.configure(relief='groove')
        self.lblframe_item1.configure(font="-family {Franklin Gothic Heavy} -size 14")
        self.lblframe_item1.configure(foreground="black")
        self.lblframe_item1.configure(text=self.name)
        self.lblframe_item1.configure(background="#d9d9d9")
        self.lblframe_item1.configure(highlightbackground="#d9d9d9")
        self.lblframe_item1.configure(highlightcolor="black")
        self.lblframe_item1.configure(width=610)

        self.btn_item1_image = tk.Button(self.lblframe_item1)
        self.btn_item1_image.place(relx=0.033, rely=0.171, height=128, width=128
                                   , bordermode='ignore')
        self.btn_item1_image.configure(activebackground="#ececec")
        self.btn_item1_image.configure(activeforeground="#000000")
        self.btn_item1_image.configure(background="#d9d9d9")
        self.btn_item1_image.configure(disabledforeground="#a3a3a3")
        self.btn_item1_image.configure(foreground="#000000")
        self.btn_item1_image.configure(highlightbackground="#d9d9d9")
        self.btn_item1_image.configure(highlightcolor="black")
        self.btn_item1_image.configure(pady="0")
        self.btn_item1_image.configure(takefocus="0")
        self.btn_item1_image.configure(image=self.image, compound=CENTER)

        self.lbl_item1_price = tk.Label(self.lblframe_item1)
        self.lbl_item1_price.place(relx=0.279, rely=0.514, height=31, width=204
                                   , bordermode='ignore')
        self.lbl_item1_price.configure(activebackground="#f9f9f9")
        self.lbl_item1_price.configure(activeforeground="black")
        self.lbl_item1_price.configure(anchor='w')
        self.lbl_item1_price.configure(background="#d9d9d9")
        self.lbl_item1_price.configure(disabledforeground="#a3a3a3")
        self.lbl_item1_price.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_item1_price.configure(foreground="#000000")
        self.lbl_item1_price.configure(highlightbackground="#d9d9d9")
        self.lbl_item1_price.configure(highlightcolor="black")
        self.lbl_item1_price.configure(text='Item Price ${}'.format(str("{:.2f}".format(self.price))))

        self.lbl_item1_quantity_left = tk.Label(self.lblframe_item1)
        self.lbl_item1_quantity_left.place(relx=0.279, rely=0.343, height=31
                                           , width=164, bordermode='ignore')
        self.lbl_item1_quantity_left.configure(activebackground="#f9f9f9")
        self.lbl_item1_quantity_left.configure(activeforeground="black")
        self.lbl_item1_quantity_left.configure(anchor='w')
        self.lbl_item1_quantity_left.configure(background="#d9d9d9")
        self.lbl_item1_quantity_left.configure(disabledforeground="#a3a3a3")
        self.lbl_item1_quantity_left.configure(font="-family {Franklin Gothic} -size 9")
        self.lbl_item1_quantity_left.configure(foreground="#aa0000")
        self.lbl_item1_quantity_left.configure(highlightbackground="#d9d9d9")
        self.lbl_item1_quantity_left.configure(highlightcolor="black")
        self.lbl_item1_quantity_left.configure(text='')

        self.lbl_item1_category = tk.Label(self.lblframe_item1)
        self.lbl_item1_category.place(relx=0.279, rely=0.171, height=31
                                      , width=124, bordermode='ignore')
        self.lbl_item1_category.configure(activebackground="#f9f9f9")
        self.lbl_item1_category.configure(activeforeground="black")
        self.lbl_item1_category.configure(anchor='w')
        self.lbl_item1_category.configure(background="#d9d9d9")
        self.lbl_item1_category.configure(disabledforeground="#a3a3a3")
        self.lbl_item1_category.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_item1_category.configure(foreground="#000000")
        self.lbl_item1_category.configure(highlightbackground="#d9d9d9")
        self.lbl_item1_category.configure(highlightcolor="black")
        self.lbl_item1_category.configure(text=self.category)

        self.msg_item1_info = tk.Message(self.lblframe_item1)
        self.msg_item1_info.place(relx=0.557, rely=0.114, relheight=0.36
                                  , relwidth=0.426, bordermode='ignore')
        self.msg_item1_info.configure(anchor='nw')
        self.msg_item1_info.configure(background="#d9d9d9")
        self.msg_item1_info.configure(font="-family {Franklin Gothic Book} -size 11")
        self.msg_item1_info.configure(foreground="#000000")
        self.msg_item1_info.configure(highlightbackground="#d9d9d9")
        self.msg_item1_info.configure(highlightcolor="black")
        self.msg_item1_info.configure(text='Info: {}'.format(self.info))
        self.msg_item1_info.configure(width=260)

        """self.btn_item1_remove_one = tk.Button(self.lblframe_item1)
        self.btn_item1_remove_one.place(relx=0.279, rely=0.686, height=24, width=197
                                    , bordermode='ignore')
        self.btn_item1_remove_one.configure(activebackground="#ececec")
        self.btn_item1_remove_one.configure(activeforeground="#000000")
        self.btn_item1_remove_one.configure(background="#d9d9d9")
        self.btn_item1_remove_one.configure(disabledforeground="#a3a3a3")
        self.btn_item1_remove_one.configure(font="-family {Arial} -size 10 -weight bold")
        self.btn_item1_remove_one.configure(foreground="#000000")
        self.btn_item1_remove_one.configure(highlightbackground="#d9d9d9")
        self.btn_item1_remove_one.configure(highlightcolor="black")
        self.btn_item1_remove_one.configure(pady="0")
        self.btn_item1_remove_one.configure(takefocus="0")
        self.btn_item1_remove_one.configure(text='Remove One')"""

        self.btn_item1_remove_all = tk.Button(self.lblframe_item1)
        self.btn_item1_remove_all.place(relx=0.279, rely=0.829, height=24, width=197
                                    , bordermode='ignore')
        self.btn_item1_remove_all.configure(activebackground="#ececec")
        self.btn_item1_remove_all.configure(activeforeground="#000000")
        self.btn_item1_remove_all.configure(background="#d9d9d9")
        self.btn_item1_remove_all.configure(disabledforeground="#a3a3a3")
        self.btn_item1_remove_all.configure(font="-family {Arial} -size 10 -weight bold")
        self.btn_item1_remove_all.configure(foreground="#000000")
        self.btn_item1_remove_all.configure(highlightbackground="#d9d9d9")
        self.btn_item1_remove_all.configure(highlightcolor="black")
        self.btn_item1_remove_all.configure(pady="0")
        self.btn_item1_remove_all.configure(takefocus="0")
        self.btn_item1_remove_all.configure(text='Remove All')

        self.lbl_item1_amount = tk.Label(self.lblframe_item1)
        self.lbl_item1_amount.place(relx=0.623, rely=0.486, height=27, width=107
                , bordermode='ignore')
        self.lbl_item1_amount.configure(activebackground="#f9f9f9")
        self.lbl_item1_amount.configure(activeforeground="black")
        self.lbl_item1_amount.configure(anchor='e')
        self.lbl_item1_amount.configure(background="#d9d9d9")
        self.lbl_item1_amount.configure(disabledforeground="#a3a3a3")
        self.lbl_item1_amount.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_item1_amount.configure(foreground="#000000")
        self.lbl_item1_amount.configure(highlightbackground="#d9d9d9")
        self.lbl_item1_amount.configure(highlightcolor="black")
        self.lbl_item1_amount.configure(text='Amount:')

        self.spinbox_item1_amount = tk.Spinbox(self.lblframe_item1, from_=1.0, to=999.0)
        self.spinbox_item1_amount.place(relx=0.82, rely=0.509, relheight=0.109
                , relwidth=0.156, bordermode='ignore')
        self.spinbox_item1_amount.configure(activebackground="#f9f9f9")
        self.spinbox_item1_amount.configure(background="white")
        self.spinbox_item1_amount.configure(buttonbackground="#d9d9d9")
        self.spinbox_item1_amount.configure(disabledforeground="#a3a3a3")
        self.spinbox_item1_amount.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.spinbox_item1_amount.configure(foreground="black")
        self.spinbox_item1_amount.configure(highlightbackground="black")
        self.spinbox_item1_amount.configure(highlightcolor="black")
        self.spinbox_item1_amount.configure(insertbackground="black")
        self.spinbox_item1_amount.configure(selectbackground="#c4c4c4")
        self.spinbox_item1_amount.configure(selectforeground="black")
        self.spinbox_item1_amount.configure(takefocus="0")
        # self.spinbox_item1_amount.configure(textvariable=CartPage_support.spinbox)
        self.spinbox_item1_amount.delete(0, END)
        self.spinbox_item1_amount.insert(0, str(self.quantity))
        self.spinbox_item1_amount.bind('<KeyRelease>', self.refresh_event)
        self.spinbox_item1_amount.bind('<FocusOut>', self.refresh_event)
        self.spinbox_item1_amount.bind('<FocusIn>', self.refresh_event)

        self.lbl_item1_cost = tk.Label(self.lblframe_item1)
        self.lbl_item1_cost.place(relx=0.623, rely=0.629, height=27, width=107
                , bordermode='ignore')
        self.lbl_item1_cost.configure(activebackground="#f9f9f9")
        self.lbl_item1_cost.configure(activeforeground="black")
        self.lbl_item1_cost.configure(anchor='e')
        self.lbl_item1_cost.configure(background="#d9d9d9")
        self.lbl_item1_cost.configure(disabledforeground="#a3a3a3")
        self.lbl_item1_cost.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_item1_cost.configure(foreground="#000000")
        self.lbl_item1_cost.configure(highlightbackground="#d9d9d9")
        self.lbl_item1_cost.configure(highlightcolor="black")
        self.lbl_item1_cost.configure(text='Price:')

        self.lbl_item1_cost_amount = tk.Label(self.lblframe_item1)
        self.lbl_item1_cost_amount.place(relx=0.82, rely=0.629, height=27
                , width=97, bordermode='ignore')
        self.lbl_item1_cost_amount.configure(activebackground="#f9f9f9")
        self.lbl_item1_cost_amount.configure(activeforeground="black")
        self.lbl_item1_cost_amount.configure(anchor='w')
        self.lbl_item1_cost_amount.configure(background="#d9d9d9")
        self.lbl_item1_cost_amount.configure(disabledforeground="#a3a3a3")
        self.lbl_item1_cost_amount.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_item1_cost_amount.configure(foreground="#000000")
        self.lbl_item1_cost_amount.configure(highlightbackground="#d9d9d9")
        self.lbl_item1_cost_amount.configure(highlightcolor="black")
        self.lbl_item1_cost_amount.configure(text='${}'.format(str("{:.2f}".format(self.price * self.quantity))))

        self.lbl_item1_cost_discount = tk.Label(self.lblframe_item1)
        self.lbl_item1_cost_discount.place(relx=0.623, rely=0.8, height=27
                , width=107, bordermode='ignore')
        self.lbl_item1_cost_discount.configure(activebackground="#f9f9f9")
        self.lbl_item1_cost_discount.configure(activeforeground="black")
        self.lbl_item1_cost_discount.configure(anchor='e')
        self.lbl_item1_cost_discount.configure(background="#d9d9d9")
        self.lbl_item1_cost_discount.configure(disabledforeground="#a3a3a3")
        self.lbl_item1_cost_discount.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_item1_cost_discount.configure(foreground="#000000")
        self.lbl_item1_cost_discount.configure(highlightbackground="#d9d9d9")
        self.lbl_item1_cost_discount.configure(highlightcolor="black")
        #self.lbl_item1_cost_discount.configure(text='Discounted:')
        self.lbl_item1_cost_discount.configure(text='')
        self.lbl_item1_cost_discount.configure(width=107)

        self.lbl_item1_cost_amount_discount = tk.Label(self.lblframe_item1)
        self.lbl_item1_cost_amount_discount.place(relx=0.82, rely=0.8, height=27
                , width=97, bordermode='ignore')
        self.lbl_item1_cost_amount_discount.configure(activebackground="#f9f9f9")
        self.lbl_item1_cost_amount_discount.configure(activeforeground="black")
        self.lbl_item1_cost_amount_discount.configure(anchor='w')
        self.lbl_item1_cost_amount_discount.configure(background="#d9d9d9")
        self.lbl_item1_cost_amount_discount.configure(disabledforeground="#a3a3a3")
        self.lbl_item1_cost_amount_discount.configure(font="-family {Franklin Gothic Heavy} -size 12")
        self.lbl_item1_cost_amount_discount.configure(foreground="#000000")
        self.lbl_item1_cost_amount_discount.configure(highlightbackground="#d9d9d9")
        self.lbl_item1_cost_amount_discount.configure(highlightcolor="black")
        #self.lbl_item1_cost_amount_discount.configure(text='$0.00')
        self.lbl_item1_cost_amount_discount.configure(text='')

        # ------------------------------------------------------------------
        # All Button Commands
        # self.btn_item1_remove_one.configure(command=lambda: self.remove(1))
        self.btn_item1_remove_all.configure(command=self.remove_all)
        tcl_refresh_event = self.register(self.refresh_event)
        self.spinbox_item1_amount.configure(command=(tcl_refresh_event, '%d'))

    def set_relative_y(self, relative_y):
        """
        Set the relative y position of this frame.
        :param relative_y: Relative y position. (Preferred range is from 0 to 1)
        """
        self.relative_y = relative_y
        self.lblframe_item1.place(rely=relative_y)

    def enable_discount(self, amount_to_discount, discount_rate):
        """
        Enable this box to discount_rate the current product attached to this box.
        :param amount_to_discount: The amount/quantity of products to include in the discount_rate.
        :param discount_rate: The amount to discount_rate. (0.20 = 20% off)
        :return:
        """
        self.is_discounted = True
        self.discounted_rate = discount_rate
        if amount_to_discount > self.quantity:
            amount_to_discount = self.quantity
        self.discounted_price = (self.price * self.quantity) - \
                                ((self.price * amount_to_discount) * self.discounted_rate)
        self.lbl_item1_cost_discount.configure(text='Discounted:')
        self.lbl_item1_cost_amount_discount.configure(text='${}'.format(str("{:.2f}".format(self.discounted_price))))

        if amount_to_discount <= 1:
            self.lbl_item1_quantity_left.configure(text='{} = {}% off {} item'
                                                   .format(self.promo_id, 100*self.discounted_rate, amount_to_discount))
        else:
            self.lbl_item1_quantity_left.configure(text='{} = {}% off {} items'
                                                   .format(self.promo_id, 100*self.discounted_rate, amount_to_discount))

    def disable_discount(self):
        """
        Disable the discount_rate for the product attached to this box.
        :return:
        """
        self.is_discounted = False
        self.lbl_item1_cost_discount.configure(text='')
        self.lbl_item1_cost_amount_discount.configure(text='')
        self.lbl_item1_quantity_left.configure(text='')

    def refresh_event(self, event):
        """
        Refreshes the Spinbox of this ItemBox.
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        self.spinbox_item1_amount.update()
        quantity_to_buy = self.spinbox_item1_amount.get()
        try:
            self.quantity = int(quantity_to_buy)
            if self.quantity <= 0:
                self.quantity = 1

            if self.quantity > self.quantity_left:
                self.quantity = self.quantity_left

            self.refresh()
        except TypeError and ValueError:
            if quantity_to_buy == "":
                pass
            else:
                self.refresh()

    def refresh(self):
        """
        Refreshes the values in this ItemBox.
        """
        item_cost = self.quantity * self.price

        # Refresh the box's display.
        self.lbl_item1_cost_amount.configure(text='${}'.format(str("{:.2f}".format(item_cost))))

        self.spinbox_item1_amount.delete(0, END)
        self.spinbox_item1_amount.insert(0, str(self.quantity))

        # Get user's CID
        username = self.main_frame.username
        self.cursor.execute("SELECT CID from Cart WHERE Username == '{}'".format(username))
        cid = self.cursor.fetchone()[0]

        self.cursor.execute("UPDATE CartItems SET Quantity = '{}' WHERE PID = '{}' AND CID = '{}'"
                            .format(self.quantity, self.pid, cid))
        self.conn.commit()

        # Update the header to display correct amount of items in shopping cart.
        self.cursor.execute('SELECT sum(Quantity) FROM CartItems WHERE CID = {}'.format(cid))
        cart_amount = self.cursor.fetchone()[0]

        if cart_amount is None:
            cart_amount = 0

        self.main_frame.header.set_lbl_view_cart_amount(cart_amount)
        self.main_frame.cart.lbl_message.configure(text='{} Items Found In Cart.'.format(cart_amount))
        self.main_frame.cart.update_totals()

    def remove_all(self, msg=True, refresh=True):
        """
        Removes all items in the database table of "CartItems"
            WHERE PID = self.pid AND CID = the current user's CID.
        :param msg: If removing all items or the last item and "msg" is True, display a message asking the user
                        if they are okay with the removal process.
        :param refresh: True, refresh the CartPage. False, do not refresh the CartPage.
        """
        self.remove(-1, msg, refresh)

    def remove(self, amount_to_remove=1, msg=True, refresh=True):
        """
        Removes "amount_to_remove" items in the database table of "CartItems"
            WHERE PID = self.pid AND CID = the current user's CID.

        :param amount_to_remove: Negative values mean to remove all.
                                    Positive values mean to remove "amount_to_remove" amount of items.
        :param msg: If removing all items or the last item and "msg" is True, display a message asking the user
                        if they are okay with the removal process.
        :param refresh: True, refresh the CartPage. False, do not refresh the CartPage.
        """

        # If "amount_to_remove" is a negative value, or if we are removing all quantities of this item
        #       from the cart, Then ask the user if they are sure they want to remove all quantities
        #       of this item from their cart.
        if msg:
            if amount_to_remove < 0 or amount_to_remove >= self.quantity:
                if tk.messagebox.askyesno('Remove',
                                          'Are you sure you want to remove this product from your shopping cart?',
                                          icon='info'):
                    # Yes, remove all or what amount is left of this product.
                    pass
                else:
                    # No, do not. Cancel this removal process.
                    return

        # To start item removal, Find the User's CID number.
        username = self.main_frame.username
        cid = self.main_frame.cid

        self.cursor.execute("SELECT CID from Cart WHERE Username == '{}' AND CID = {}"
                            .format(username, cid))
        cid = self.cursor.fetchone()[0]

        # Check for a NULL or NoneType cid.
        if cid is None:
            tk.messagebox.showerror('CartItemBox.remove_one()',
                                    'This message should not appear. If it does, then something might be wrong.',
                                    icon='error')
            return

        if (amount_to_remove < 0) or (amount_to_remove >= self.quantity):
            # Remove All products with "self.pid" from the shopping cart.
            self.cursor.execute("DELETE FROM CartItems WHERE PID = '{}' AND CID = '{}'"
                                .format(self.pid, cid))
        else:
            # Remove "amount_to_remove" products with "self.pid" from the shopping cart.
            self.quantity -= amount_to_remove
            self.cursor.execute("UPDATE CartItems SET Quantity = '{}' WHERE PID = '{}' AND CID = '{}'"
                                .format(self.quantity, self.pid, cid))

        self.conn.commit()
        self.refresh()

        if refresh:
            self.main_frame.cart.refresh_user_cart()

    def destroy(self):
        """
            Destroy this widget.
        """
        self.lblframe_item1.destroy()


###########################################################
