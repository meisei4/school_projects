#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Apr 14, 2019 01:11:46 AM CDT  platform: Windows NT
#
# GUI module EDITED by Kong Jimmy Vang.
#

""" AccountPage.py

    Description:
        This is the Logout Page. This page should only be shown when a user is logged in.

    Team: Daniel Bartelson, Ian Neville, Brian Draheim, Kong Jimmy Vang
    Coder(s): Kong Jimmy Vang, Ian Neville, Daniel Bartelson
    Database: Brian Draheim
"""

# Python Imports
import os
import sys
import sqlite3
import platform
import math
from random import Random
import datetime
from decimal import Decimal

#######################################################
# Check the version of Python and import accordingly. #
#######################################################
if sys.version_info.major == 2:
    # Python 2.x
    from Tkinter import *
    import Tkinter as tk
    import Tkinter.messagebox
    import ttk
    from Tkinter.filedialog import askopenfilename
    py3 = False

elif sys.version_info.major == 3:
    # Python 3.x
    from tkinter import *
    import tkinter as tk
    import tkinter.messagebox
    import tkinter.ttk as ttk
    from tkinter.filedialog import askopenfilename
    py3 = True

else:
    # Unsupported Version
    print("\nThis version of Python is not supported.")
    print("***EXITING SOFTWARE***")
    sys.exit()

from PIL import ImageTk, Image


DEBUG = True

###########################################################


class AccountPage(tk.Frame):
    """
    A Tkinter.Frame object.

    Initializes the HomePage frame.
    """

    def __init__(self, top_frame=None, *args, **kwargs):
        """
            :param top_frame: A reference to a Tkinter.Frame object.
                    (Used to allow access to the ShoppingCart's top_frame.)
            :param args:
            :param kwargs:
        """

        tk.Frame.__init__(self, *args, **kwargs)

        ### Attributes ###
        self.top_frame = top_frame

        self.conn = sqlite3.connect("ShoppingCart.db")
        self.cursor = self.conn.cursor()

        self.role = self.top_frame.role

        '''This class configures and populates the toplevel window.
           top_frame is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        font13 = "-family {Franklin Gothic Heavy} -size 11"

        """self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected_product', _compcolor), ('active',_ana2color)])"""

        #self.geometry("1024x768+411+151")
        #self.title("Shopping Cart")
        self.configure(background="#d9d9d9")
        self.configure(highlightbackground="#d9d9d9")
        self.configure(highlightcolor="black")

        ### Create Main Widget/Container. (Will contain all pages) ###
        self.container = tk.Frame(self)
        self.container.pack(side="top", fill="both", expand=True)
        self.container.configure(background="#d9d9d9")
        self.container.configure(highlightbackground="#d9d9d9")
        self.container.configure(highlightcolor="black")

        ### Widgets ###
        self.settings = Settings(self.top_frame, self)
        self.settings_order_history = OrderHistory(self.top_frame, self)
        self.settings_admin_promotion = Promotion(self.top_frame, self)
        self.settings_admin_product = Product(self.top_frame, self)

        self.settings.place(in_=self.container, x=0, y=0, relwidth=1, relheight=1)
        self.settings_order_history.place(in_=self.container, x=0, y=0, relwidth=1, relheight=1)
        self.settings_admin_promotion.place(in_=self.container, x=0, y=0, relwidth=1, relheight=1)
        self.settings_admin_product.place(in_=self.container, x=0, y=0, relwidth=1, relheight=1)

        self.setup()  # Setup other settings.

    ### Functions/Methods ###
    def setup(self):
        self.settings_admin_promotion.setup_scrolledlist()
        self.settings_admin_product.setup_scrolledlist()

        # Show settings/account menu first.
        self.settings.lift()
        self.settings_order_history.pack()
        self.settings_admin_promotion.pack()
        self.settings_admin_product.pack()

        # Get the role of the user from "ShoppingCart.py".
        self.role = self.top_frame.role

        if self.role == "admin":
            self.settings.show_admin_settings()
        else:
            self.settings.hide_admin_settings()

        self.goto_settings()

    def goto_settings(self):
        """
        Go to the page with the settings/account information.
        """
        self.settings.display_logged_in_user()
        self.settings.lift()
        self.settings.focus()

    def goto_order_history(self):
        """
        Go to the page with the current logged in user's order history.
        """
        self.settings_order_history.display_logged_in_user()
        self.settings_order_history.create_order_history()
        self.settings_order_history.lift()
        self.settings_order_history.focus()

    def goto_admin_promotion(self):
        """
        Go to the page where Admins can add/edit/remove promotions.
        """
        self.settings_admin_promotion.display_logged_in_user()
        self.settings_admin_promotion.lift()
        self.settings_admin_promotion.focus()

    def goto_admin_product(self):
        """
        Go to the page where Admins can add/edit/remove products.
        """
        self.settings_admin_product.display_logged_in_user()
        self.settings_admin_product.lift()
        self.settings_admin_product.focus()


###########################################################
# --- Inner Classes --- #

class Settings(tk.Frame):
    """
    A frame that shows a user all available settings.

    :param main_frame: Main Frame (Must be a MainFrame instance in 'ShoppingCart.py')
    :param top_frame: The Frame this will be attached to.

    """

    def __init__(self,
                 main_frame=None,
                 top_frame=None,
                 *args, **kwargs):

        tk.Frame.__init__(self, *args, **kwargs)

        ### Attributes ###
        self.main_frame = main_frame
        self.top_frame = top_frame

        self.conn = sqlite3.connect("ShoppingCart.db")
        self.cursor = self.conn.cursor()

        ### Widgets ###
        self.lblframe_account = tk.LabelFrame(top_frame)
        self.lblframe_account.place(relx=0.215, rely=0.273, relheight=0.462, relwidth=0.547)
        self.lblframe_account.configure(relief='groove')
        self.lblframe_account.configure(font="-family {Franklin Gothic Heavy} -size 11")
        self.lblframe_account.configure(foreground="black")
        self.lblframe_account.configure(background="#d9d9d9")
        self.lblframe_account.configure(highlightbackground="#d9d9d9")
        self.lblframe_account.configure(highlightcolor="black")
        self.lblframe_account.configure(width=560)

        self.btn_logout = tk.Button(self.lblframe_account)
        self.btn_logout.place(relx=0.429, rely=0.873, height=24, width=81, bordermode='ignore')
        self.btn_logout.configure(activebackground="#ececec")
        self.btn_logout.configure(activeforeground="#000000")
        self.btn_logout.configure(background="#d9d9d9")
        self.btn_logout.configure(disabledforeground="#a3a3a3")
        self.btn_logout.configure(font="-family {Franklin Gothic Medium} -size 10 -weight bold")
        self.btn_logout.configure(foreground="#000000")
        self.btn_logout.configure(highlightbackground="#d9d9d9")
        self.btn_logout.configure(highlightcolor="black")
        self.btn_logout.configure(pady="0")
        self.btn_logout.configure(text='Logout')

        self.msg_box = tk.Message(self.lblframe_account)
        self.msg_box.place(relx=0.036, rely=0.056, relheight=0.065
                           , relwidth=0.929, bordermode='ignore')
        self.msg_box.configure(background="#d9d9d9")
        self.msg_box.configure(font="-family {Arial} -size 10 -weight bold")
        self.msg_box.configure(foreground="#000000")
        self.msg_box.configure(highlightbackground="#d9d9d9")
        self.msg_box.configure(highlightcolor="black")
        self.msg_box.configure(text='You are logged in as "?".')
        self.msg_box.configure(width=520)

        self.lblframe_settings_panel = tk.LabelFrame(self.lblframe_account)
        self.lblframe_settings_panel.place(relx=0.036, rely=0.169
                , relheight=0.662, relwidth=0.929, bordermode='ignore')
        self.lblframe_settings_panel.configure(relief='groove')
        self.lblframe_settings_panel.configure(foreground="black")
        self.lblframe_settings_panel.configure(background="#d9d9d9")
        self.lblframe_settings_panel.configure(highlightbackground="#d9d9d9")
        self.lblframe_settings_panel.configure(highlightcolor="black")
        self.lblframe_settings_panel.configure(width=520)

        self.lbl_account_settings = tk.Label(self.lblframe_settings_panel)
        self.lbl_account_settings.place(relx=0.038, rely=0.043, height=21
                , width=484, bordermode='ignore')
        self.lbl_account_settings.configure(activebackground="#f9f9f9")
        self.lbl_account_settings.configure(activeforeground="black")
        self.lbl_account_settings.configure(anchor='w')
        self.lbl_account_settings.configure(background="#d9d9d9")
        self.lbl_account_settings.configure(disabledforeground="#a3a3a3")
        self.lbl_account_settings.configure(foreground="#000000")
        self.lbl_account_settings.configure(highlightbackground="#d9d9d9")
        self.lbl_account_settings.configure(highlightcolor="black")
        self.lbl_account_settings.configure(text='''Account Settings''')

        self.btn_order_history = tk.Button(self.lblframe_settings_panel)
        self.btn_order_history.place(relx=0.038, rely=0.17, height=24, width=227
                , bordermode='ignore')
        self.btn_order_history.configure(activebackground="#ececec")
        self.btn_order_history.configure(activeforeground="#000000")
        self.btn_order_history.configure(background="#d9d9d9")
        self.btn_order_history.configure(disabledforeground="#a3a3a3")
        self.btn_order_history.configure(foreground="#000000")
        self.btn_order_history.configure(highlightbackground="#d9d9d9")
        self.btn_order_history.configure(highlightcolor="black")
        self.btn_order_history.configure(pady="0")
        self.btn_order_history.configure(text='''Order History''')

        self.btn_admin_promo = tk.Button(self.lblframe_settings_panel)
        self.btn_admin_promo.place(relx=0.038, rely=0.298, height=24, width=227, bordermode='ignore')
        self.btn_admin_promo.configure(activebackground="#ececec")
        self.btn_admin_promo.configure(activeforeground="#000000")
        self.btn_admin_promo.configure(background="#d9d9d9")
        self.btn_admin_promo.configure(disabledforeground="#a3a3a3")
        self.btn_admin_promo.configure(foreground="#000000")
        self.btn_admin_promo.configure(highlightbackground="#d9d9d9")
        self.btn_admin_promo.configure(highlightcolor="black")
        self.btn_admin_promo.configure(pady="0")
        self.btn_admin_promo.configure(text='''(Admin) Add/Edit/Remove promotion''')

        self.btn_admin_product = tk.Button(self.lblframe_settings_panel)
        self.btn_admin_product.place(relx=0.038, rely=0.426, height=24, width=227, bordermode='ignore')
        self.btn_admin_product.configure(activebackground="#ececec")
        self.btn_admin_product.configure(activeforeground="#000000")
        self.btn_admin_product.configure(background="#d9d9d9")
        self.btn_admin_product.configure(disabledforeground="#a3a3a3")
        self.btn_admin_product.configure(foreground="#000000")
        self.btn_admin_product.configure(highlightbackground="#d9d9d9")
        self.btn_admin_product.configure(highlightcolor="black")
        self.btn_admin_product.configure(pady="0")
        self.btn_admin_product.configure(text='''(Admin) Add/Edit/Remove product''')

        # ------------------------------------------------------------------
        # All Button Commands
        self.btn_logout.configure(command=self.main_frame.logout_goto_login_register_page)
        self.btn_order_history.configure(command=lambda: self.top_frame.goto_order_history())
        self.btn_admin_promo.configure(command=lambda: self.top_frame.goto_admin_promotion())
        self.btn_admin_product.configure(command=lambda: self.top_frame.goto_admin_product())

    def display_logged_in_user(self):
        """
        Show the user that is logged in.
        """
        self.msg_box.configure(text='You are logged in as "{}".'.format(self.main_frame.username))

    def show_admin_settings(self):
        """
        Show the admin settings/buttons.
        """
        self.btn_admin_promo.place(relx=0.038, rely=0.298, height=24, width=227, bordermode='ignore')
        self.btn_admin_product.place(relx=0.038, rely=0.426, height=24, width=227, bordermode='ignore')

    def hide_admin_settings(self):
        """
        Hide the admin settings/buttons.
        """
        self.btn_admin_promo.place(relx=-1, rely=-1)
        self.btn_admin_product.place(relx=-1, rely=-1)

    def lift(self):
        """
        Lift this Tkinter Frame to the front.
        """
        self.lblframe_account.lift()

    def destroy(self):
        """
            Destroy this widget.
        """
        self.lblframe_account.destroy()


class OrderHistory(tk.Frame):
    """
    {SETTINGS FRAME}A frame that shows a user their order history.

    :param main_frame: Main Frame (Must be a MainFrame instance in 'ShoppingCart.py')
    :param top_frame: The Frame this will be attached to.

    """

    def __init__(self,
                 main_frame=None,
                 top_frame=None,
                 *args, **kwargs):

        tk.Frame.__init__(self, *args, **kwargs)

        ### Attributes ###
        self.list_of_orderboxes = []

        self.main_frame = main_frame
        self.top_frame = top_frame

        self.conn = sqlite3.connect("ShoppingCart.db")
        self.cursor = self.conn.cursor()

        ### Widgits ###
        self.lblframe_account = tk.LabelFrame(self.top_frame)
        self.lblframe_account.place(relx=0.02, rely=0.13, relheight=0.814
                , relwidth=0.967)
        self.lblframe_account.configure(relief='groove')
        self.lblframe_account.configure(font="-family {Franklin Gothic Heavy} -size 11")
        self.lblframe_account.configure(foreground="black")
        self.lblframe_account.configure(background="#d9d9d9")
        self.lblframe_account.configure(highlightbackground="#d9d9d9")
        self.lblframe_account.configure(highlightcolor="black")
        self.lblframe_account.configure(width=990)

        self.msg_box = tk.Message(self.lblframe_account)
        self.msg_box.place(relx=0.02, rely=0.032, relheight=0.037, relwidth=0.96
                , bordermode='ignore')
        self.msg_box.configure(background="#d9d9d9")
        self.msg_box.configure(font="-family {Arial} -size 10 -weight bold")
        self.msg_box.configure(foreground="#000000")
        self.msg_box.configure(highlightbackground="#d9d9d9")
        self.msg_box.configure(highlightcolor="black")
        self.msg_box.configure(text='''You are logged in as {}.''')
        self.msg_box.configure(width=950)

        self.lblframe_settings_panel = tk.LabelFrame(self.lblframe_account)
        self.lblframe_settings_panel.place(relx=0.02, rely=0.08, relheight=0.888
                , relwidth=0.96, bordermode='ignore')
        self.lblframe_settings_panel.configure(relief='groove')
        self.lblframe_settings_panel.configure(font="-family {Franklin Gothic Heavy} -size 15 -underline 1")
        self.lblframe_settings_panel.configure(foreground="black")
        self.lblframe_settings_panel.configure(text='''Order History''')
        self.lblframe_settings_panel.configure(background="#d9d9d9")
        self.lblframe_settings_panel.configure(highlightbackground="#d9d9d9")
        self.lblframe_settings_panel.configure(highlightcolor="black")
        self.lblframe_settings_panel.configure(width=950)

        self.btn_logout = tk.Button(self.lblframe_settings_panel)
        self.btn_logout.place(relx=0.147, rely=0.054, height=24, width=81
                , bordermode='ignore')
        self.btn_logout.configure(activebackground="#ececec")
        self.btn_logout.configure(activeforeground="#000000")
        self.btn_logout.configure(background="#d9d9d9")
        self.btn_logout.configure(disabledforeground="#a3a3a3")
        self.btn_logout.configure(font="-family {Franklin Gothic Medium} -size 10 -weight bold")
        self.btn_logout.configure(foreground="#000000")
        self.btn_logout.configure(highlightbackground="#d9d9d9")
        self.btn_logout.configure(highlightcolor="black")
        self.btn_logout.configure(pady="0")
        self.btn_logout.configure(text='''Logout''')

        self.btn_go_back = tk.Button(self.lblframe_settings_panel)
        self.btn_go_back.place(relx=0.011, rely=0.054, height=24, width=87
                               , bordermode='ignore')
        self.btn_go_back.configure(activebackground="#ececec")
        self.btn_go_back.configure(activeforeground="#000000")
        self.btn_go_back.configure(background="#d9d9d9")
        self.btn_go_back.configure(disabledforeground="#a3a3a3")
        self.btn_go_back.configure(font="-family {Franklin Gothic Medium} -size 10 -weight bold")
        self.btn_go_back.configure(foreground="#000000")
        self.btn_go_back.configure(highlightbackground="#d9d9d9")
        self.btn_go_back.configure(highlightcolor="black")
        self.btn_go_back.configure(pady="0")
        self.btn_go_back.configure(text='''Go Back''')

        # ------------------------------------------------------------------
        # Scrollable Order History Setup.
        self.frame_order_history = tk.LabelFrame(self.lblframe_settings_panel)
        self.frame_order_history.place(relx=0.011, rely=0.126, relheight=0.856
                , relwidth=0.979, bordermode='ignore')
        self.frame_order_history.configure(borderwidth="2")
        self.frame_order_history.configure(relief='ridge')
        self.frame_order_history.configure(background="#d9d9d9")
        self.frame_order_history.configure(width=925)

        self.canvas = tk.Canvas(self.frame_order_history)
        self.canvas.configure(background="#d9d9d9")
        self.canvas.configure(insertbackground="black")
        self.canvas.configure(selectbackground="#c4c4c4")
        self.canvas.configure(selectforeground="black")

        self.scroll_y = tk.Scrollbar(self.frame_order_history, orient="vertical", command=self.canvas.yview)

        # ------------------------------------------------------------------
        # All Button Commands
        self.btn_logout.configure(command=self.main_frame.logout_goto_login_register_page)
        self.btn_go_back.configure(command=lambda: self.go_back())

        self.pack()

    def create_order_history(self):
        """
        Creates an order history for the user to view their purchases.
        """

        # Clear current order history page.
        self.clear_order_history()
        self.canvas.delete("all")  # Clears the canvas.

        ### Create Order History. ###
        # Find all Purchases. Create a OrderBox for each purchase.
        self.cursor.execute("SELECT * FROM Purchases WHERE Username = '{}'".format(self.main_frame.username))
        purchases = self.cursor.fetchall()
        for p in purchases:
            purchase_date = p[1]
            aid = p[2]
            cid = p[3]
            order_total = p[4]
            order_total_tax = p[5]

            self.cursor.execute("SELECT * FROM Addresses WHERE AID = {}".format(aid))
            address = self.cursor.fetchone()
            shipping_address = address[1]
            # address2 = address[2]
            # address3 = address[3]
            city = address[4]
            state = address[5]
            country = address[6]
            zip_code = address[7]

            orderbox = self.create_orderbox(900, 230,
                                            cid, purchase_date,
                                            shipping_address, country,
                                            state, city, zip_code, order_total, order_total_tax)

            self.cursor.execute("SELECT * FROM CartItems WHERE CID = {}".format(cid))
            cart_items = self.cursor.fetchall()

            # Create itembox for each item/product purchased.
            for item in cart_items:
                pid = item[2]
                quantity_bought = item[3]
                promo_id = item[4]
                self.cursor.execute("SELECT * FROM Promotions WHERE PromoID = '{}'".format(promo_id))
                promotion = self.cursor.fetchone()

                discount_rate = 1.0
                if promotion is not None:
                    discount_rate = promotion[3]

                self.cursor.execute("SELECT * FROM Products WHERE PID = {}".format(pid))
                product = self.cursor.fetchone()
                p_name = product[1]
                p_category = product[2]
                p_price = product[3]
                image_blob = product[6]

                # Extract image data.
                image_data = image_blob
                with open(os.path.join("Images", "temp_image.jpeg"), 'wb') as f:
                    f.write(image_data)
                f.close()
                image = os.path.join("Images", "temp_image.jpeg")

                orderbox.create_itembox(p_name, p_category, quantity_bought, p_price, discount_rate,
                                        (p_price*quantity_bought), image)

        # Put all OrderBoxes in the scrollable canvas.
        y_pos = 0
        for box in self.list_of_orderboxes:
            self.canvas.create_window(0, y_pos, anchor='nw', window=box.frame)
            y_pos += box.height

        # If the user has no order history, create a lbl message and put it on the canvas display.
        if not purchases:
            lbl = tk.Label(self.canvas)
            lbl.configure(activebackground="#f9f9f9")
            lbl.configure(activeforeground="black")
            lbl.configure(anchor='w')
            lbl.configure(background="#d9d9d9")
            lbl.configure(disabledforeground="#a3a3a3")
            lbl.configure(font="-family {Segoe UI} -size 10 -weight bold")
            lbl.configure(foreground="#000000")
            lbl.configure(highlightbackground="#d9d9d9")
            lbl.configure(highlightcolor="black")
            lbl.configure(text='''You have no previous orders.''')

            self.canvas.create_window(0, 0, anchor='nw', window=lbl)

        # Makes sure everything is displayed before configuring the scrollregion
        self.canvas.update_idletasks()

        # Configure the canvas scrolling properties. (Allows the page to scroll)
        self.canvas.configure(scrollregion=self.canvas.bbox('all'),
                              yscrollcommand=self.scroll_y.set)

        self.canvas.pack(fill='both', expand=True, side='left')
        self.scroll_y.pack(fill='y', side='right')

    def create_orderbox(self, width, height,
                        order_number, purchase_date,
                        shipping_address, country,
                        state, city, zip_code, order_total, order_total_tax):
        """
        Create a new OrderBox.
        :return Return the OrderBox object:
        """

        num_orders = len(self.list_of_orderboxes)

        orderbox = OrderBox(self.main_frame,
                            self.canvas,
                            width=width, height=height,
                            order_number=order_number, purchase_date=purchase_date,
                            shipping_address=shipping_address, country=country,
                            state=state, city=city, zip_code=zip_code,
                            order_total=order_total, order_total_tax=order_total_tax)

        self.list_of_orderboxes.append(orderbox)

        return orderbox

    def clear_order_history(self):
        """
        Clear the order history page.
        """
        for x in self.list_of_orderboxes:
            x.destroy()
        self.list_of_orderboxes.clear()

    def display_logged_in_user(self):
        """
        Show the user that is logged in.
        """
        self.msg_box.configure(text='You are logged in as "{}".'.format(self.main_frame.username))

    def go_back(self):
        """
        Go back to the Account Page.
        """
        self.pack()
        self.top_frame.goto_settings()

    def lift(self):
        """
        Lift this frame to the front.
        """
        self.lblframe_account.place(relx=0.02, rely=0.13, relheight=0.814, relwidth=0.967)
        self.lblframe_account.lift()

    def pack(self):
        """
        Pack this frame away.
        """
        self.lblframe_account.pack()

    def destroy(self):
        """
            Destroy this widget.
        """
        self.lblframe_account.destroy()


class OrderBox(tk.Frame):
    """
    [HELPER FRAME for the class, "OrderHistory"] A box that contains order purchase information.

    :param main_frame: Main Frame (Must be a MainFrame instance in 'ShoppingCart.py')
    :param top_frame: The Frame this will be attached to.

    """

    def __init__(self,
                 main_frame=None,
                 top_frame=None,
                 x=0,
                 y=0,
                 width=900,
                 height=230,
                 order_number=0,
                 status_msg="Proccessing Order",
                 purchase_date=None,
                 shipping_address="",
                 country="",
                 state="",
                 city="",
                 zip_code="",
                 order_total=0.00,
                 order_total_tax=0.00,
                 *args, **kwargs):

        tk.Frame.__init__(self, *args, **kwargs)

        ### Attributes ###
        font10 = "-family {Segoe UI} -size 9 -weight bold -underline 1"
        font14 = "-family {Segoe UI} -size 11 -weight bold"
        font12 = "-family {Segoe UI} -size 15 -weight bold"

        self.list_of_itemboxes = []

        self.main_frame = main_frame
        self.top_frame = top_frame
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.order_number = order_number
        self.status_msg = status_msg
        self.purchase_date = purchase_date
        self.shipping_address = shipping_address
        self.country = country
        self.state = state
        self.city = city
        self.zip_code = zip_code
        self.order_total = order_total
        self.order_total_tax = order_total_tax

        self.conn = sqlite3.connect("ShoppingCart.db")
        self.cursor = self.conn.cursor()

        ### Widgits ###
        self.lblframe_orderbox = tk.LabelFrame(self.top_frame)
        # self.lblframe_orderbox.place(relx=0.011, rely=0.021, relheight=0.263
        #         , relwidth=0.978)
        self.lblframe_orderbox.configure(relief='groove')
        self.lblframe_orderbox.configure(font="-family {Franklin Gothic Heavy} -size 14")
        self.lblframe_orderbox.configure(foreground="black")
        self.lblframe_orderbox.configure(text='Order CID #{}  |  Status - [{}]'.format(self.order_number, self.status_msg))
        self.lblframe_orderbox.configure(background="#d9d9d9")
        self.lblframe_orderbox.configure(width=self.width)
        self.lblframe_orderbox.configure(height=self.height)
        # self.lblframe_orderbox.configure(width=900)
        # self.lblframe_orderbox.configure(height=230)

        self.frame = self.lblframe_orderbox

        self.lbl_orderbox_purchase_date = tk.Label(self.lblframe_orderbox)
        self.lbl_orderbox_purchase_date.place(x=10, y=30, height=21, width=242, bordermode='ignore')
        self.lbl_orderbox_purchase_date.configure(anchor='w')
        self.lbl_orderbox_purchase_date.configure(background="#d9d9d9")
        self.lbl_orderbox_purchase_date.configure(disabledforeground="#a3a3a3")
        self.lbl_orderbox_purchase_date.configure(font=font14)
        self.lbl_orderbox_purchase_date.configure(foreground="#000000")
        self.lbl_orderbox_purchase_date.configure(text='Purchase Date: {}'.format(self.purchase_date))
        self.lbl_orderbox_purchase_date.configure(width=242)

        self.lbl_orderbox_shipping_info = tk.Label(self.lblframe_orderbox)
        self.lbl_orderbox_shipping_info.place(x=30, y=60, height=21, width=179, bordermode='ignore')
        self.lbl_orderbox_shipping_info.configure(anchor='w')
        self.lbl_orderbox_shipping_info.configure(background="#d9d9d9")
        self.lbl_orderbox_shipping_info.configure(disabledforeground="#a3a3a3")
        self.lbl_orderbox_shipping_info.configure(font=font10)
        self.lbl_orderbox_shipping_info.configure(foreground="#000000")
        self.lbl_orderbox_shipping_info.configure(text='''Shipping Information''')
        self.lbl_orderbox_shipping_info.configure(width=179)

        self.lbl_orderbox_shipping_address = tk.Label(self.lblframe_orderbox)
        self.lbl_orderbox_shipping_address.place(x=40, y=80, height=21, width=507, bordermode='ignore')
        self.lbl_orderbox_shipping_address.configure(anchor='w')
        self.lbl_orderbox_shipping_address.configure(background="#d9d9d9")
        self.lbl_orderbox_shipping_address.configure(disabledforeground="#a3a3a3")
        self.lbl_orderbox_shipping_address.configure(foreground="#000000")
        self.lbl_orderbox_shipping_address.configure(text='Shipping Address: {}'.format(self.shipping_address))
        self.lbl_orderbox_shipping_address.configure(width=507)

        self.lbl_orderbox_country = tk.Label(self.lblframe_orderbox)
        self.lbl_orderbox_country.place(x=40, y=100, height=21, width=127, bordermode='ignore')
        self.lbl_orderbox_country.configure(activebackground="#f9f9f9")
        self.lbl_orderbox_country.configure(activeforeground="black")
        self.lbl_orderbox_country.configure(anchor='w')
        self.lbl_orderbox_country.configure(background="#d9d9d9")
        self.lbl_orderbox_country.configure(disabledforeground="#a3a3a3")
        self.lbl_orderbox_country.configure(foreground="#000000")
        self.lbl_orderbox_country.configure(highlightbackground="#d9d9d9")
        self.lbl_orderbox_country.configure(highlightcolor="black")
        self.lbl_orderbox_country.configure(text='Country: {}'.format(self.country))
        self.lbl_orderbox_country.configure(width=127)

        self.lbl_orderbox_state = tk.Label(self.lblframe_orderbox)
        self.lbl_orderbox_state.place(x=40, y=120, height=21, width=77, bordermode='ignore')
        self.lbl_orderbox_state.configure(activebackground="#f9f9f9")
        self.lbl_orderbox_state.configure(activeforeground="black")
        self.lbl_orderbox_state.configure(anchor='w')
        self.lbl_orderbox_state.configure(background="#d9d9d9")
        self.lbl_orderbox_state.configure(disabledforeground="#a3a3a3")
        self.lbl_orderbox_state.configure(foreground="#000000")
        self.lbl_orderbox_state.configure(highlightbackground="#d9d9d9")
        self.lbl_orderbox_state.configure(highlightcolor="black")
        self.lbl_orderbox_state.configure(text='State: {}'.format(self.state))
        self.lbl_orderbox_state.configure(width=77)

        self.lbl_orderbox_city = tk.Label(self.lblframe_orderbox)
        self.lbl_orderbox_city.place(x=170, y=100, height=21, width=147, bordermode='ignore')
        self.lbl_orderbox_city.configure(activebackground="#f9f9f9")
        self.lbl_orderbox_city.configure(activeforeground="black")
        self.lbl_orderbox_city.configure(anchor='w')
        self.lbl_orderbox_city.configure(background="#d9d9d9")
        self.lbl_orderbox_city.configure(disabledforeground="#a3a3a3")
        self.lbl_orderbox_city.configure(foreground="#000000")
        self.lbl_orderbox_city.configure(highlightbackground="#d9d9d9")
        self.lbl_orderbox_city.configure(highlightcolor="black")
        self.lbl_orderbox_city.configure(text='City: {}'.format(self.city))
        self.lbl_orderbox_city.configure(width=147)

        self.lbl_orderbox_zip_code = tk.Label(self.lblframe_orderbox)
        self.lbl_orderbox_zip_code.place(x=170, y=120, height=21, width=137, bordermode='ignore')
        self.lbl_orderbox_zip_code.configure(activebackground="#f9f9f9")
        self.lbl_orderbox_zip_code.configure(activeforeground="black")
        self.lbl_orderbox_zip_code.configure(anchor='w')
        self.lbl_orderbox_zip_code.configure(background="#d9d9d9")
        self.lbl_orderbox_zip_code.configure(disabledforeground="#a3a3a3")
        self.lbl_orderbox_zip_code.configure(foreground="#000000")
        self.lbl_orderbox_zip_code.configure(highlightbackground="#d9d9d9")
        self.lbl_orderbox_zip_code.configure(highlightcolor="black")
        self.lbl_orderbox_zip_code.configure(text='ZIP: {}'.format(self.zip_code))
        self.lbl_orderbox_zip_code.configure(width=137)

        self.lbl_orderbox_total = tk.Label(self.lblframe_orderbox)
        self.lbl_orderbox_total.place(x=360, y=30, height=21, width=512, bordermode='ignore')
        self.lbl_orderbox_total.configure(activebackground="#f9f9f9")
        self.lbl_orderbox_total.configure(activeforeground="black")
        self.lbl_orderbox_total.configure(anchor='e')
        self.lbl_orderbox_total.configure(background="#d9d9d9")
        self.lbl_orderbox_total.configure(disabledforeground="#a3a3a3")
        self.lbl_orderbox_total.configure(font=font12)
        self.lbl_orderbox_total.configure(foreground="#000000")
        self.lbl_orderbox_total.configure(highlightbackground="#d9d9d9")
        self.lbl_orderbox_total.configure(highlightcolor="black")
        self.lbl_orderbox_total.configure(text='Order Total (Before Tax): ${}'
                                          .format(str("{:.2f}".format(self.order_total))))

        self.lbl_orderbox_total_1 = tk.Label(self.lblframe_orderbox)
        self.lbl_orderbox_total_1.place(x=360, y=60, height=21, width=512, bordermode='ignore')
        self.lbl_orderbox_total_1.configure(activebackground="#f9f9f9")
        self.lbl_orderbox_total_1.configure(activeforeground="black")
        self.lbl_orderbox_total_1.configure(anchor='e')
        self.lbl_orderbox_total_1.configure(background="#d9d9d9")
        self.lbl_orderbox_total_1.configure(disabledforeground="#a3a3a3")
        self.lbl_orderbox_total_1.configure(font="-family {Segoe UI} -size 15 -weight bold")
        self.lbl_orderbox_total_1.configure(foreground="#000000")
        self.lbl_orderbox_total_1.configure(highlightbackground="#d9d9d9")
        self.lbl_orderbox_total_1.configure(highlightcolor="black")
        self.lbl_orderbox_total_1.configure(text='Order Total: ${}'.format(str("{:.2f}".format(self.order_total_tax))))

    def create_itembox(self, name, category, quantity, price, discount_rate, subtotal, image):
        """
        Create a new ItemBox.
        :return Return an ItemBox object:
        """

        num_items = len(self.list_of_itemboxes)

        itembox = ItemBox(self.main_frame,
                          self.frame,
                          x=10, y=150+(55*num_items), width=870, height=55,
                          name=name, category=category,
                          quantity=quantity, price=price, discount_rate=discount_rate, subtotal=subtotal,
                          image=image)
        self.list_of_itemboxes.append(itembox)

        # Set OrderBox's height to adjust and fit all itemboxes.
        self.set_height(230+(55*num_items))
        return itembox

    def clear_list_of_itemboxes(self):
        """
        Clear/Destroy all ItemBox objects.
        :return:
        """
        for x in self.list_of_itemboxes:
            x.destroy()
        self.list_of_itemboxes.clear()

    def destroy(self):
        """
            Destroy this widget.
        """
        self.lblframe_orderbox.destroy()

    def set_height(self, height):
        """
        Set the height of this OrderBox.
        """
        self.height = height
        self.lblframe_orderbox.configure(height=self.height)


class ItemBox(tk.Frame):
    """
    [HELPER FRAME for the class, "OrderHistory"] A box that contains a purchased item.

    :param main_frame: Main Frame (Must be a MainFrame instance in 'ShoppingCart.py')
    :param top_frame: The Frame this will be attached to.

    """

    def __init__(self,
                 main_frame=None,
                 top_frame=None,
                 x=10,
                 y=150,
                 width=870,
                 height=55,
                 name="",
                 category="",
                 quantity=0,
                 price=0,
                 discount_rate=0,
                 subtotal=0.00,
                 image="",
                 *args, **kwargs):

        tk.Frame.__init__(self, *args, **kwargs)

        ### Attributes ###
        font9 = "-family {Segoe UI} -size 9 -weight bold"

        self.main_frame = main_frame
        self.top_frame = top_frame
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.name = name
        self.category = category
        self.quantity = quantity
        self.price = price
        self.discount_rate = discount_rate
        self.subtotal = subtotal
        try:
            img = Image.open(image)
            img = img.resize((55, 55), Image.ANTIALIAS)
            self.image = ImageTk.PhotoImage(img)
        except:
            pass

        self.conn = sqlite3.connect("ShoppingCart.db")
        self.cursor = self.conn.cursor()

        ### Widgits ###
        self.lblframe_itembox = tk.LabelFrame(self.top_frame)
        # self.lblframe_itembox.place(x=10, y=150, bordermode='ignore')
        self.lblframe_itembox.place(x=self.x, y=self.y, bordermode='ignore')
        self.lblframe_itembox.configure(relief='ridge')
        self.lblframe_itembox.configure(foreground="black")
        self.lblframe_itembox.configure(relief='ridge')
        self.lblframe_itembox.configure(background="#d9d9d9")
        self.lblframe_itembox.configure(highlightbackground="#d9d9d9")
        self.lblframe_itembox.configure(highlightcolor="black")
        self.lblframe_itembox.configure(width=self.width)
        self.lblframe_itembox.configure(height=self.height)
        # self.lblframe_itembox.configure(width=870)
        # self.lblframe_itembox.configure(height=55)

        self.frame = self.lblframe_itembox

        self.btn_itembox_image = tk.Button(self.lblframe_itembox)
        self.btn_itembox_image.place(relx=0.0, rely=0.0, height=55, width=55
                , bordermode='ignore')
        self.btn_itembox_image.configure(activebackground="#ececec")
        self.btn_itembox_image.configure(activeforeground="#000000")
        self.btn_itembox_image.configure(background="#d9d9d9")
        self.btn_itembox_image.configure(disabledforeground="#a3a3a3")
        self.btn_itembox_image.configure(foreground="#000000")
        self.btn_itembox_image.configure(highlightbackground="#d9d9d9")
        self.btn_itembox_image.configure(highlightcolor="black")
        self.btn_itembox_image.configure(pady="0")
        self.btn_itembox_image.configure(width=55)
        self.btn_itembox_image.configure(image=self.image, compound=CENTER)

        self.lbl_itembox_1 = tk.Label(self.lblframe_itembox)
        self.lbl_itembox_1.place(relx=0.069, rely=0.182, height=21, width=798
                , bordermode='ignore')
        self.lbl_itembox_1.configure(anchor='w')
        self.lbl_itembox_1.configure(background="#d9d9d9")
        self.lbl_itembox_1.configure(disabledforeground="#a3a3a3")
        self.lbl_itembox_1.configure(font=font9)
        self.lbl_itembox_1.configure(foreground="#000000")
        self.lbl_itembox_1.configure(text='{} ({})'.format(self.name, self.category))
        self.lbl_itembox_1.configure(width=798)

        self.lbl_itembox_2 = tk.Label(self.lblframe_itembox)
        self.lbl_itembox_2.place(relx=0.069, rely=0.545, height=21, width=194
                , bordermode='ignore')
        self.lbl_itembox_2.configure(activebackground="#f9f9f9")
        self.lbl_itembox_2.configure(activeforeground="black")
        self.lbl_itembox_2.configure(anchor='w')
        self.lbl_itembox_2.configure(background="#d9d9d9")
        self.lbl_itembox_2.configure(disabledforeground="#a3a3a3")
        self.lbl_itembox_2.configure(font=font9)
        self.lbl_itembox_2.configure(foreground="#000000")
        self.lbl_itembox_2.configure(highlightbackground="#d9d9d9")
        self.lbl_itembox_2.configure(highlightcolor="black")
        self.lbl_itembox_2.configure(text='Quantity: {}'.format(self.quantity))
        self.lbl_itembox_2.configure(width=194)

        self.lbl_itembox_3 = tk.Label(self.lblframe_itembox)
        self.lbl_itembox_3.place(relx=0.46, rely=0.545, height=21, width=464
                , bordermode='ignore')
        self.lbl_itembox_3.configure(activebackground="#f9f9f9")
        self.lbl_itembox_3.configure(activeforeground="black")
        self.lbl_itembox_3.configure(anchor='e')
        self.lbl_itembox_3.configure(background="#d9d9d9")
        self.lbl_itembox_3.configure(disabledforeground="#a3a3a3")
        self.lbl_itembox_3.configure(font=font9)
        self.lbl_itembox_3.configure(foreground="#000000")
        self.lbl_itembox_3.configure(highlightbackground="#d9d9d9")
        self.lbl_itembox_3.configure(highlightcolor="black")
        self.lbl_itembox_3.configure(text='''???''')
        self.lbl_itembox_3.configure(width=464)

        self.lbl_itembox_4 = tk.Label(self.lblframe_itembox)
        self.lbl_itembox_4.place(relx=0.724, rely=0.182, height=21, width=234
                , bordermode='ignore')
        self.lbl_itembox_4.configure(activebackground="#f9f9f9")
        self.lbl_itembox_4.configure(activeforeground="black")
        self.lbl_itembox_4.configure(anchor='e')
        self.lbl_itembox_4.configure(background="#d9d9d9")
        self.lbl_itembox_4.configure(disabledforeground="#a3a3a3")
        self.lbl_itembox_4.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.lbl_itembox_4.configure(foreground="#000000")
        self.lbl_itembox_4.configure(highlightbackground="#d9d9d9")
        self.lbl_itembox_4.configure(highlightcolor="black")
        self.lbl_itembox_4.configure(text='''???''')

        amount_to_discount = 1
        self.discounted_price = (self.price * self.quantity) - \
                                ((self.price * amount_to_discount) * self.discount_rate)

        if discount_rate == 1.0:
            self.lbl_itembox_3.configure(text='Subtotal: ${}'.format(str("{:.2f}".format(self.subtotal))))
            self.lbl_itembox_4.configure(text='')
        else:
            self.lbl_itembox_3.configure(text='(Promotion Was Applied) Discounted Subtotal: ${}'
                                         .format(str("{:.2f}".format(self.discounted_price))))
            self.lbl_itembox_4.configure(text='Subtotal: ${}'.format(str("{:.2f}".format(self.subtotal))))

    def destroy(self):
        """
            Destroy this widget.
        """
        self.lblframe_itembox.destroy()


class Promotion(tk.Frame):
    """
    [ADMIN SETTINGS FRAME] A frame that allows admins to add/edit/remove promotions.

    :param main_frame: Main Frame (Must be a MainFrame instance in 'ShoppingCart.py')
    :param top_frame: The Frame this will be attached to.

    """

    def __init__(self,
                 main_frame=None,
                 top_frame=None,
                 *args, **kwargs):

        tk.Frame.__init__(self, *args, **kwargs)

        ### Attributes ###
        font9 = "-family {Segoe UI} -size 9 -weight bold"

        self.main_frame = main_frame
        self.top_frame = top_frame

        self.conn = sqlite3.connect("ShoppingCart.db")
        self.cursor = self.conn.cursor()

        ### Widgits ###
        self.lblframe_account = tk.LabelFrame(self.top_frame)
        self.lblframe_account.place(relx=0.02, rely=0.273, relheight=0.462
                , relwidth=0.957)
        self.lblframe_account.configure(relief='groove')
        self.lblframe_account.configure(font="-family {Franklin Gothic Heavy} -size 11")
        self.lblframe_account.configure(foreground="black")
        self.lblframe_account.configure(background="#d9d9d9")
        self.lblframe_account.configure(highlightbackground="#d9d9d9")
        self.lblframe_account.configure(highlightcolor="black")
        self.lblframe_account.configure(width=980)

        self.btn_logout = tk.Button(self.lblframe_account)
        self.btn_logout.place(relx=0.449, rely=0.873, height=24, width=81
                , bordermode='ignore')
        self.btn_logout.configure(activebackground="#ececec")
        self.btn_logout.configure(activeforeground="#000000")
        self.btn_logout.configure(background="#d9d9d9")
        self.btn_logout.configure(disabledforeground="#a3a3a3")
        self.btn_logout.configure(font="-family {Franklin Gothic Medium} -size 10 -weight bold")
        self.btn_logout.configure(foreground="#000000")
        self.btn_logout.configure(highlightbackground="#d9d9d9")
        self.btn_logout.configure(highlightcolor="black")
        self.btn_logout.configure(pady="0")
        self.btn_logout.configure(text='Logout')

        self.msg_box = tk.Message(self.lblframe_account)
        self.msg_box.place(relx=0.02, rely=0.056, relheight=0.065, relwidth=0.959
                , bordermode='ignore')
        self.msg_box.configure(background="#d9d9d9")
        self.msg_box.configure(font="-family {Arial} -size 10 -weight bold")
        self.msg_box.configure(foreground="#000000")
        self.msg_box.configure(highlightbackground="#d9d9d9")
        self.msg_box.configure(highlightcolor="black")
        self.msg_box.configure(text='You are logged in as "?".')
        self.msg_box.configure(width=520)

        self.lblframe_settings_panel = tk.LabelFrame(self.lblframe_account)
        self.lblframe_settings_panel.place(relx=0.02, rely=0.169, relheight=0.662
                , relwidth=0.959, bordermode='ignore')
        self.lblframe_settings_panel.configure(relief='groove')
        self.lblframe_settings_panel.configure(font="-family {Franklin Gothic Heavy} -size 15 -underline 1")
        self.lblframe_settings_panel.configure(foreground="black")
        self.lblframe_settings_panel.configure(text='''Add/Remove/Edit Promotions''')
        self.lblframe_settings_panel.configure(background="#d9d9d9")
        self.lblframe_settings_panel.configure(highlightbackground="#d9d9d9")
        self.lblframe_settings_panel.configure(highlightcolor="black")
        self.lblframe_settings_panel.configure(width=940)

        self.entry_promo_code = tk.Entry(self.lblframe_settings_panel)
        self.entry_promo_code.place(relx=0.149, rely=0.298, height=24
                , relwidth=0.121, bordermode='ignore')
        self.entry_promo_code.configure(background="white")
        self.entry_promo_code.configure(disabledforeground="#a3a3a3")
        self.entry_promo_code.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.entry_promo_code.configure(foreground="#000000")
        self.entry_promo_code.configure(highlightbackground="#d9d9d9")
        self.entry_promo_code.configure(highlightcolor="black")
        self.entry_promo_code.configure(insertbackground="black")
        self.entry_promo_code.configure(selectbackground="#c4c4c4")
        self.entry_promo_code.configure(selectforeground="black")
        self.entry_promo_code.configure(width=114)

        self.lbl_promo_code = tk.Label(self.lblframe_settings_panel)
        self.lbl_promo_code.place(relx=0.011, rely=0.298, height=26, width=120
                , bordermode='ignore')
        self.lbl_promo_code.configure(activebackground="#f9f9f9")
        self.lbl_promo_code.configure(activeforeground="black")
        self.lbl_promo_code.configure(anchor='e')
        self.lbl_promo_code.configure(background="#d9d9d9")
        self.lbl_promo_code.configure(disabledforeground="#a3a3a3")
        self.lbl_promo_code.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.lbl_promo_code.configure(foreground="#000000")
        self.lbl_promo_code.configure(highlightbackground="#d9d9d9")
        self.lbl_promo_code.configure(highlightcolor="black")
        self.lbl_promo_code.configure(text='''Promotion Code:''')
        self.lbl_promo_code.configure(width=120)

        self.lbl_start_date = tk.Label(self.lblframe_settings_panel)
        self.lbl_start_date.place(relx=0.011, rely=0.426, height=26, width=120
                , bordermode='ignore')
        self.lbl_start_date.configure(activebackground="#f9f9f9")
        self.lbl_start_date.configure(activeforeground="black")
        self.lbl_start_date.configure(anchor='e')
        self.lbl_start_date.configure(background="#d9d9d9")
        self.lbl_start_date.configure(disabledforeground="#a3a3a3")
        self.lbl_start_date.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.lbl_start_date.configure(foreground="#000000")
        self.lbl_start_date.configure(highlightbackground="#d9d9d9")
        self.lbl_start_date.configure(highlightcolor="black")
        self.lbl_start_date.configure(text='''Starting Date:''')

        self.entry_starting_date = tk.Entry(self.lblframe_settings_panel)
        self.entry_starting_date.place(relx=0.149, rely=0.426, height=24
                , relwidth=0.121, bordermode='ignore')
        self.entry_starting_date.configure(background="white")
        self.entry_starting_date.configure(disabledforeground="#a3a3a3")
        self.entry_starting_date.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.entry_starting_date.configure(foreground="#000000")
        self.entry_starting_date.configure(highlightbackground="#d9d9d9")
        self.entry_starting_date.configure(highlightcolor="black")
        self.entry_starting_date.configure(insertbackground="black")
        self.entry_starting_date.configure(selectbackground="#c4c4c4")
        self.entry_starting_date.configure(selectforeground="black")
        self.entry_starting_date.bind('<KeyRelease>', self.validate_entries)
        self.entry_starting_date.bind('<FocusOut>', self.validate_entries)

        self.lbl_end_date = tk.Label(self.lblframe_settings_panel)
        self.lbl_end_date.place(relx=0.011, rely=0.553, height=26, width=120
                , bordermode='ignore')
        self.lbl_end_date.configure(activebackground="#f9f9f9")
        self.lbl_end_date.configure(activeforeground="black")
        self.lbl_end_date.configure(anchor='e')
        self.lbl_end_date.configure(background="#d9d9d9")
        self.lbl_end_date.configure(disabledforeground="#a3a3a3")
        self.lbl_end_date.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.lbl_end_date.configure(foreground="#000000")
        self.lbl_end_date.configure(highlightbackground="#d9d9d9")
        self.lbl_end_date.configure(highlightcolor="black")
        self.lbl_end_date.configure(text='''Ending Date:''')

        self.entry_ending_date = tk.Entry(self.lblframe_settings_panel)
        self.entry_ending_date.place(relx=0.149, rely=0.553, height=24
                , relwidth=0.121, bordermode='ignore')
        self.entry_ending_date.configure(background="white")
        self.entry_ending_date.configure(disabledforeground="#a3a3a3")
        self.entry_ending_date.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.entry_ending_date.configure(foreground="#000000")
        self.entry_ending_date.configure(highlightbackground="#d9d9d9")
        self.entry_ending_date.configure(highlightcolor="black")
        self.entry_ending_date.configure(insertbackground="black")
        self.entry_ending_date.configure(selectbackground="#c4c4c4")
        self.entry_ending_date.configure(selectforeground="black")
        self.entry_ending_date.bind('<KeyRelease>', self.validate_entries)
        self.entry_ending_date.bind('<FocusOut>', self.validate_entries)

        self.lbl_discount_amount = tk.Label(self.lblframe_settings_panel)
        self.lbl_discount_amount.place(relx=0.011, rely=0.681, height=26
                , width=120, bordermode='ignore')
        self.lbl_discount_amount.configure(activebackground="#f9f9f9")
        self.lbl_discount_amount.configure(activeforeground="black")
        self.lbl_discount_amount.configure(anchor='e')
        self.lbl_discount_amount.configure(background="#d9d9d9")
        self.lbl_discount_amount.configure(disabledforeground="#a3a3a3")
        self.lbl_discount_amount.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.lbl_discount_amount.configure(foreground="#000000")
        self.lbl_discount_amount.configure(highlightbackground="#d9d9d9")
        self.lbl_discount_amount.configure(highlightcolor="black")
        self.lbl_discount_amount.configure(text='''Discount:''')

        self.entry_discount_amount = tk.Entry(self.lblframe_settings_panel)
        self.entry_discount_amount.place(relx=0.149, rely=0.681, height=24
                , relwidth=0.121, bordermode='ignore')
        self.entry_discount_amount.configure(background="white")
        self.entry_discount_amount.configure(disabledforeground="#a3a3a3")
        self.entry_discount_amount.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.entry_discount_amount.configure(foreground="#000000")
        self.entry_discount_amount.configure(highlightbackground="#d9d9d9")
        self.entry_discount_amount.configure(highlightcolor="black")
        self.entry_discount_amount.configure(insertbackground="black")
        self.entry_discount_amount.configure(selectbackground="#c4c4c4")
        self.entry_discount_amount.configure(selectforeground="black")
        self.entry_discount_amount.bind('<KeyRelease>', self.validate_entries)
        self.entry_discount_amount.bind('<FocusOut>', self.validate_entries)

        self.btn_add_promo = tk.Button(self.lblframe_settings_panel)
        self.btn_add_promo.place(relx=0.128, rely=0.851, height=24, width=127
                , bordermode='ignore')
        self.btn_add_promo.configure(activebackground="#ececec")
        self.btn_add_promo.configure(activeforeground="#000000")
        self.btn_add_promo.configure(background="#d9d9d9")
        self.btn_add_promo.configure(disabledforeground="#a3a3a3")
        self.btn_add_promo.configure(font="-family {Franklin Gothic Medium} -size 10 -weight bold")
        self.btn_add_promo.configure(foreground="#000000")
        self.btn_add_promo.configure(highlightbackground="#d9d9d9")
        self.btn_add_promo.configure(highlightcolor="black")
        self.btn_add_promo.configure(pady="0")
        self.btn_add_promo.configure(text='''Add Promo''')

        self.btn_remove_promo = tk.Button(self.lblframe_settings_panel)
        self.btn_remove_promo.place(relx=0.628, rely=0.809, height=24, width=217
                , bordermode='ignore')
        self.btn_remove_promo.configure(activebackground="#ececec")
        self.btn_remove_promo.configure(activeforeground="#000000")
        self.btn_remove_promo.configure(background="#d9d9d9")
        self.btn_remove_promo.configure(disabledforeground="#a3a3a3")
        self.btn_remove_promo.configure(font="-family {Franklin Gothic Medium} -size 10 -weight bold")
        self.btn_remove_promo.configure(foreground="#000000")
        self.btn_remove_promo.configure(highlightbackground="#d9d9d9")
        self.btn_remove_promo.configure(highlightcolor="black")
        self.btn_remove_promo.configure(pady="0")
        self.btn_remove_promo.configure(text='''Remove Selected Promo''')

        self.lbl_list_products = tk.Label(self.lblframe_settings_panel)
        self.lbl_list_products.place(relx=0.287, rely=0.128, height=21, width=284
                                     , bordermode='ignore')
        self.lbl_list_products.configure(anchor='w')
        self.lbl_list_products.configure(background="#d9d9d9")
        self.lbl_list_products.configure(disabledforeground="#a3a3a3")
        self.lbl_list_products.configure(font=font9)
        self.lbl_list_products.configure(foreground="#000000")
        self.lbl_list_products.configure(text='''Products''')
        self.lbl_list_products.configure(width=284)

        self.lbl_list_promos = tk.Label(self.lblframe_settings_panel)
        self.lbl_list_promos.place(relx=0.617, rely=0.128, height=21, width=334
                                   , bordermode='ignore')
        self.lbl_list_promos.configure(anchor='w')
        self.lbl_list_promos.configure(background="#d9d9d9")
        self.lbl_list_promos.configure(disabledforeground="#a3a3a3")
        self.lbl_list_promos.configure(font=font9)
        self.lbl_list_promos.configure(foreground="#000000")
        self.lbl_list_promos.configure(text='''List of Added Promotions''')

        self.scrolledlistbox_products = ScrolledListBox(self.lblframe_settings_panel)
        self.scrolledlistbox_products.place(relx=0.287, rely=0.213, relheight=0.745
                                            , relwidth=0.299, bordermode='ignore')
        self.scrolledlistbox_products.configure(background="white")
        self.scrolledlistbox_products.configure(disabledforeground="#a3a3a3")
        self.scrolledlistbox_products.configure(font="TkFixedFont")
        self.scrolledlistbox_products.configure(foreground="black")
        self.scrolledlistbox_products.configure(highlightbackground="#d9d9d9")
        self.scrolledlistbox_products.configure(highlightcolor="#d9d9d9")
        self.scrolledlistbox_products.configure(selectbackground="#c4c4c4")
        self.scrolledlistbox_products.configure(selectforeground="black")
        self.scrolledlistbox_products.configure(width=10)
        self.scrolledlistbox_products.bind('<ButtonRelease-1>', self.get_scrolledlistbox_products_selection)
        self.selected_product = None

        self.scrolledlistbox_promos = ScrolledListBox(self.lblframe_settings_panel)
        self.scrolledlistbox_promos.place(relx=0.617, rely=0.213, relheight=0.532
                                          , relwidth=0.352, bordermode='ignore')
        self.scrolledlistbox_promos.configure(background="white")
        self.scrolledlistbox_promos.configure(disabledforeground="#a3a3a3")
        self.scrolledlistbox_promos.configure(font="TkFixedFont")
        self.scrolledlistbox_promos.configure(foreground="black")
        self.scrolledlistbox_promos.configure(highlightbackground="#d9d9d9")
        self.scrolledlistbox_promos.configure(highlightcolor="#d9d9d9")
        self.scrolledlistbox_promos.configure(selectbackground="#c4c4c4")
        self.scrolledlistbox_promos.configure(selectforeground="black")
        self.scrolledlistbox_promos.configure(width=10)
        self.scrolledlistbox_promos.bind('<ButtonRelease-1>', self.get_scrolledlistbox_promos_selection)
        self.selected_promo = None

        self.btn_go_back = tk.Button(self.lblframe_settings_panel)
        self.btn_go_back.place(relx=0.021, rely=0.128, height=24, width=87
                , bordermode='ignore')
        self.btn_go_back.configure(activebackground="#ececec")
        self.btn_go_back.configure(activeforeground="#000000")
        self.btn_go_back.configure(background="#d9d9d9")
        self.btn_go_back.configure(disabledforeground="#a3a3a3")
        self.btn_go_back.configure(font="-family {Franklin Gothic Medium} -size 10 -weight bold")
        self.btn_go_back.configure(foreground="#000000")
        self.btn_go_back.configure(highlightbackground="#d9d9d9")
        self.btn_go_back.configure(highlightcolor="black")
        self.btn_go_back.configure(pady="0")
        self.btn_go_back.configure(text='Go Back')
        self.btn_go_back.configure(width=87)

        # ------------------------------------------------------------------
        # All Button Commands
        self.btn_logout.configure(command=self.main_frame.logout_goto_login_register_page)
        self.btn_add_promo.configure(command=self.add_promo)
        self.btn_remove_promo.configure(command=self.remove_promo)
        self.btn_go_back.configure(command=lambda: self.go_back())

        self.pack()

    def display_logged_in_user(self):
        """
        Show the user that is logged in.
        """
        self.msg_box.configure(text='You are logged in as "{}".'.format(self.main_frame.username))

    def go_back(self):
        """
        Go back to the Account Page.
        """
        self.pack()
        self.top_frame.goto_settings()

    def lift(self):
        """
        Lift this frame to the front.
        """
        self.lblframe_account.place(relx=0.02, rely=0.273, relheight=0.462, relwidth=0.957)
        self.lblframe_account.lift()

    def pack(self):
        """
        Pack this frame away.
        """
        self.lblframe_account.pack()

    def destroy(self):
        """
            Destroy this widget.
        """
        self.lblframe_account.destroy()

    def validate_entries(self, event):
        """
        Validate user entries when they type and release a key in the entry boxes.

            Currently validating:
            - StartDate
            - EndDate
            - Discount

        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        start_date = self.entry_starting_date.get()
        end_date = self.entry_ending_date.get()
        discount = self.entry_discount_amount.get()

        if re.search("[^0-9-/]", start_date):
            start_date = re.sub("[^0-9-/]", "", start_date)
            self.entry_starting_date.delete(0, END)
            self.entry_starting_date.insert(0, start_date)
        if re.search("[^0-9-/]", end_date):
            end_date = re.sub("[^0-9-/]", "", end_date)
            self.entry_ending_date.delete(0, END)
            self.entry_ending_date.insert(0, end_date)
        if re.search("[^0-9,.]", discount):
            discount = re.sub("[^0-9,.]", "", discount)
            self.entry_discount_amount.delete(0, END)
            self.entry_discount_amount.insert(0, discount)

    def get_scrolledlistbox_products_selection(self, event):
        """
        Get the currently selected product text in "scrolledlistbox_products".
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        try:
            self.selected_product = self.scrolledlistbox_products.get(self.scrolledlistbox_products.curselection())
        except:
            pass

    def get_scrolledlistbox_promos_selection(self, event):
        """
        Get the currently selected promotion text in "scrolledlistbox_promos".
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        try:
            self.selected_promo = self.scrolledlistbox_promos.get(self.scrolledlistbox_promos.curselection())
        except:
            pass

    def setup_scrolledlist(self):
        """
        Setup the scrolled list with a list of products to add promos to.
        """
        ### Add products to first list ###
        self.cursor.execute("SELECT PID, Name FROM Products WHERE Active == 1")
        products = self.cursor.fetchall()

        # Clear listbox.
        self.scrolledlistbox_products.delete(0, END)

        # Add all products to listbox.
        for product in products:
            self.scrolledlistbox_products.insert(0, product)

        ### Add promotions to second list.
        self.cursor.execute("SELECT * FROM Promotions")
        promotions = self.cursor.fetchall()

        # Clear listbox.
        self.scrolledlistbox_promos.delete(0, END)

        # Add all products to listbox.
        for promo in promotions:
            self.scrolledlistbox_promos.insert(0, promo)

    def add_promo(self):
        """
        Add a promotion to a product.
        """
        try:
            promo_code = self.entry_promo_code.get()
            start_date = self.entry_starting_date.get()
            end_date = self.entry_ending_date.get()
            discount = Decimal(self.entry_discount_amount.get())
            pid = -1
        except:
            pass

        # Validate the dates.
        try:
            datetime.datetime.strptime(start_date, "%Y/%m/%d").ctime()
            datetime.datetime.strptime(end_date, "%Y/%m/%d").ctime()
        except:
            try:
                datetime.datetime.strptime(start_date, "%Y-%m-%d").ctime()
                datetime.datetime.strptime(end_date, "%Y-%m-%d").ctime()
            except:
                tk.messagebox.showinfo('Error',
                                       'One of the Dates is invalid. '
                                       'Please double check if it matches this format: yyyy/mm/dd', icon='error')
                return

        ### Put promo_code into the database table of "CartItems". ###
        # Get the PID from the product that the user selected.
        if self.selected_product is not None:
            pid = str(self.selected_product[0])
        else:
            tk.messagebox.showinfo('Error',
                                   'Please click on the product you want to add a promotion code to.', icon='error')
            return

        # Check if a duplicate PromoID exists in the database.
        self.cursor.execute("SELECT * FROM Promotions WHERE PromoID = '{}'"
                            .format(promo_code))
        database_promo = self.cursor.fetchone()

        # If a duplicate exists...
        try:
            if database_promo is not None:
                # Ask the user are they sure they want to replace that PromoID with a new one.
                if tk.messagebox.askyesno("Replace Promotion?",
                                          "You will replace the current promo code with a new one. Is this okay?"
                                          "\n"
                                          "\nCurrent Promo Code:\n\t{}".format(database_promo) +
                                          "\nNew Promo Code:\n\t{}".format(
                                              (promo_code, start_date, end_date, float(discount), pid)),
                                          icon="question"):

                    # Replace old promotion with a new promotion.
                    self.cursor.execute("UPDATE Promotions "
                                        + "SET PromoID = '{}', StartDate = '{}', EndDate = '{}', Discount = {}, PID = {} "
                                        .format(promo_code, start_date, end_date, discount, pid)
                                        + "WHERE PromoID == '{}'".format(promo_code))

                    # Commit changes to the database.
                    self.conn.commit()
                    tk.messagebox.showinfo('Promotion Added', 'The promotion code was successfully added.', icon='info')

                    # Update GUI lists.
                    self.setup_scrolledlist()

                    return

            # Else, if a duplicate does NOT exist...
            else:
                # Add a new Promotion/PromoID to the database.
                self.cursor.execute("INSERT INTO Promotions "
                                    + "('PromoID', 'StartDate', 'EndDate', 'Discount', 'PID') "
                                    + "VALUES ('{}','{}','{}','{}','{}')"
                                    .format(promo_code, start_date, end_date, discount, pid))

                # Commit changes to the database.
                self.conn.commit()
                tk.messagebox.showinfo('Info', 'The promotion code was successfully added.', icon='info')

                # Update GUI lists.
                self.setup_scrolledlist()
        except:
            tk.messagebox.showinfo('Error', 'Invalid input. Could not add the promotion code.', icon='error')

    def remove_promo(self):
        """
        Removes a promotion from the database.
        """
        if self.selected_promo is not None:
            selected_promo = str(self.selected_promo[0])

            # Ask the user are they sure they want to replace that PromoID with a new one.
            if tk.messagebox.askyesno("Delete Promotion?",
                                      "Are you sure you want to delete the promotion, \"{}\"?".format(selected_promo),
                                      icon="question"):

                # Remove promo.
                self.cursor.execute("DELETE FROM Promotions WHERE PromoID = '{}'"
                                    .format(selected_promo))

                # Commit changes to the database.
                self.conn.commit()

                # Update GUI lists.
                self.setup_scrolledlist()

        else:
            tk.messagebox.showinfo('Error',
                                   'Please click on the promotion you want to remove.', icon='error')
            return


class Product(tk.Frame):
    """
    [ADMIN SETTINGS FRAME] A frame that allows admins to add/edit/remove promotions.

    :param main_frame: Main Frame (Must be a MainFrame instance in 'ShoppingCart.py')
    :param top_frame: The Frame this will be attached to.

    """

    def __init__(self,
                 main_frame=None,
                 top_frame=None,
                 *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)

        ### Attributes ###
        font9 = "-family {Segoe UI} -size 9 -weight bold"

        self.main_frame = main_frame
        self.top_frame = top_frame

        self.conn = sqlite3.connect("ShoppingCart.db")
        self.cursor = self.conn.cursor()

        self.pid = None
        self.image = None
        self.image_file = ""

        ### Widgits ###
        self.lblframe_account = tk.LabelFrame(self.top_frame)
        self.lblframe_account.place(relx=0.02, rely=0.208, relheight=0.605
                , relwidth=0.957)
        self.lblframe_account.configure(relief='groove')
        self.lblframe_account.configure(font="-family {Franklin Gothic Heavy} -size 11")
        self.lblframe_account.configure(foreground="black")
        self.lblframe_account.configure(background="#d9d9d9")
        self.lblframe_account.configure(highlightbackground="#d9d9d9")
        self.lblframe_account.configure(highlightcolor="black")
        self.lblframe_account.configure(width=980)

        self.btn_logout = tk.Button(self.lblframe_account)
        self.btn_logout.place(relx=0.449, rely=0.903, height=24, width=81
                , bordermode='ignore')
        self.btn_logout.configure(activebackground="#ececec")
        self.btn_logout.configure(activeforeground="#000000")
        self.btn_logout.configure(background="#d9d9d9")
        self.btn_logout.configure(disabledforeground="#a3a3a3")
        self.btn_logout.configure(font="-family {Franklin Gothic Medium} -size 10 -weight bold")
        self.btn_logout.configure(foreground="#000000")
        self.btn_logout.configure(highlightbackground="#d9d9d9")
        self.btn_logout.configure(highlightcolor="black")
        self.btn_logout.configure(pady="0")
        self.btn_logout.configure(text='''Logout''')

        self.msg_box = tk.Message(self.lblframe_account)
        self.msg_box.place(relx=0.02, rely=0.043, relheight=0.049, relwidth=0.959
                , bordermode='ignore')
        self.msg_box.configure(background="#d9d9d9")
        self.msg_box.configure(font="-family {Arial} -size 10 -weight bold")
        self.msg_box.configure(foreground="#000000")
        self.msg_box.configure(highlightbackground="#d9d9d9")
        self.msg_box.configure(highlightcolor="black")
        self.msg_box.configure(text='''You are logged in as {}.''')
        self.msg_box.configure(width=940)

        self.lblframe_settings_panel = tk.LabelFrame(self.lblframe_account)
        self.lblframe_settings_panel.place(relx=0.02, rely=0.129, relheight=0.72
                , relwidth=0.959, bordermode='ignore')
        self.lblframe_settings_panel.configure(relief='groove')
        self.lblframe_settings_panel.configure(font="-family {Franklin Gothic Heavy} -size 15 -underline 1")
        self.lblframe_settings_panel.configure(foreground="black")
        self.lblframe_settings_panel.configure(text='''Add/Remove/Edit Products''')
        self.lblframe_settings_panel.configure(background="#d9d9d9")
        self.lblframe_settings_panel.configure(highlightbackground="#d9d9d9")
        self.lblframe_settings_panel.configure(highlightcolor="black")
        self.lblframe_settings_panel.configure(width=940)

        self.entry_product_name = tk.Entry(self.lblframe_settings_panel)
        self.entry_product_name.place(relx=0.149, rely=0.209, height=24
                , relwidth=0.26, bordermode='ignore')
        self.entry_product_name.configure(background="white")
        self.entry_product_name.configure(disabledforeground="#a3a3a3")
        self.entry_product_name.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.entry_product_name.configure(foreground="#000000")
        self.entry_product_name.configure(highlightbackground="#d9d9d9")
        self.entry_product_name.configure(highlightcolor="black")
        self.entry_product_name.configure(insertbackground="black")
        self.entry_product_name.configure(selectbackground="#c4c4c4")
        self.entry_product_name.configure(selectforeground="black")
        self.entry_product_name.configure(width=244)

        self.lbl_product_name = tk.Label(self.lblframe_settings_panel)
        self.lbl_product_name.place(relx=0.011, rely=0.209, height=26, width=120
                , bordermode='ignore')
        self.lbl_product_name.configure(activebackground="#f9f9f9")
        self.lbl_product_name.configure(activeforeground="black")
        self.lbl_product_name.configure(anchor='e')
        self.lbl_product_name.configure(background="#d9d9d9")
        self.lbl_product_name.configure(disabledforeground="#a3a3a3")
        self.lbl_product_name.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.lbl_product_name.configure(foreground="#000000")
        self.lbl_product_name.configure(highlightbackground="#d9d9d9")
        self.lbl_product_name.configure(highlightcolor="black")
        self.lbl_product_name.configure(text='''Product Name:''')

        self.lbl_price = tk.Label(self.lblframe_settings_panel)
        self.lbl_price.place(relx=0.011, rely=0.299, height=26, width=120
                , bordermode='ignore')
        self.lbl_price.configure(activebackground="#f9f9f9")
        self.lbl_price.configure(activeforeground="black")
        self.lbl_price.configure(anchor='e')
        self.lbl_price.configure(background="#d9d9d9")
        self.lbl_price.configure(disabledforeground="#a3a3a3")
        self.lbl_price.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.lbl_price.configure(foreground="#000000")
        self.lbl_price.configure(highlightbackground="#d9d9d9")
        self.lbl_price.configure(highlightcolor="black")
        self.lbl_price.configure(text='''Price:''')

        self.entry_price = tk.Entry(self.lblframe_settings_panel)
        self.entry_price.place(relx=0.149, rely=0.299, height=24, relwidth=0.121
                , bordermode='ignore')
        self.entry_price.configure(background="white")
        self.entry_price.configure(disabledforeground="#a3a3a3")
        self.entry_price.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.entry_price.configure(foreground="#000000")
        self.entry_price.configure(highlightbackground="#d9d9d9")
        self.entry_price.configure(highlightcolor="black")
        self.entry_price.configure(insertbackground="black")
        self.entry_price.configure(selectbackground="#c4c4c4")
        self.entry_price.configure(selectforeground="black")
        self.entry_price.bind('<KeyRelease>', self.validate_entries)
        self.entry_price.bind('<FocusOut>', self.validate_entries)

        self.lbl_quantity = tk.Label(self.lblframe_settings_panel)
        self.lbl_quantity.place(relx=0.011, rely=0.388, height=26, width=120
                , bordermode='ignore')
        self.lbl_quantity.configure(activebackground="#f9f9f9")
        self.lbl_quantity.configure(activeforeground="black")
        self.lbl_quantity.configure(anchor='e')
        self.lbl_quantity.configure(background="#d9d9d9")
        self.lbl_quantity.configure(disabledforeground="#a3a3a3")
        self.lbl_quantity.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.lbl_quantity.configure(foreground="#000000")
        self.lbl_quantity.configure(highlightbackground="#d9d9d9")
        self.lbl_quantity.configure(highlightcolor="black")
        self.lbl_quantity.configure(text='''Quantity''')

        self.entry_quantity = tk.Entry(self.lblframe_settings_panel)
        self.entry_quantity.place(relx=0.149, rely=0.388, height=24
                , relwidth=0.121, bordermode='ignore')
        self.entry_quantity.configure(background="white")
        self.entry_quantity.configure(disabledforeground="#a3a3a3")
        self.entry_quantity.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.entry_quantity.configure(foreground="#000000")
        self.entry_quantity.configure(highlightbackground="#d9d9d9")
        self.entry_quantity.configure(highlightcolor="black")
        self.entry_quantity.configure(insertbackground="black")
        self.entry_quantity.configure(selectbackground="#c4c4c4")
        self.entry_quantity.configure(selectforeground="black")
        self.entry_quantity.bind('<KeyRelease>', self.validate_entries)
        self.entry_quantity.bind('<FocusOut>', self.validate_entries)

        self.listbox_categories = tk.Listbox(self.lblframe_settings_panel)
        self.listbox_categories.place(relx=0.287, rely=0.299, relheight=0.155
                , relwidth=0.121, bordermode='ignore')
        self.listbox_categories.configure(background="white")
        self.listbox_categories.configure(disabledforeground="#a3a3a3")
        self.listbox_categories.configure(font="TkFixedFont")
        self.listbox_categories.configure(foreground="#000000")
        self.listbox_categories.configure(width=114)
        self.listbox_categories.bind('<ButtonRelease-1>', self.get_listbox_categories_selection)
        self.selected_category = None

        self.lbl_info = tk.Label(self.lblframe_settings_panel)
        self.lbl_info.place(relx=0.011, rely=0.478, height=26, width=120
                , bordermode='ignore')
        self.lbl_info.configure(activebackground="#f9f9f9")
        self.lbl_info.configure(activeforeground="black")
        self.lbl_info.configure(anchor='e')
        self.lbl_info.configure(background="#d9d9d9")
        self.lbl_info.configure(disabledforeground="#a3a3a3")
        self.lbl_info.configure(font="-family {Franklin Gothic Medium} -size 11")
        self.lbl_info.configure(foreground="#000000")
        self.lbl_info.configure(highlightbackground="#d9d9d9")
        self.lbl_info.configure(highlightcolor="black")
        self.lbl_info.configure(text='''Description:''')

        self.scrolledtext_info = ScrolledText(self.lblframe_settings_panel)
        self.scrolledtext_info.place(relx=0.053, rely=0.567, relheight=0.361
                , relwidth=0.352, bordermode='ignore')
        self.scrolledtext_info.configure(background="white")
        self.scrolledtext_info.configure(font="TkTextFont")
        self.scrolledtext_info.configure(foreground="black")
        self.scrolledtext_info.configure(highlightbackground="#d9d9d9")
        self.scrolledtext_info.configure(highlightcolor="black")
        self.scrolledtext_info.configure(insertbackground="black")
        self.scrolledtext_info.configure(insertborderwidth="3")
        self.scrolledtext_info.configure(selectbackground="#c4c4c4")
        self.scrolledtext_info.configure(selectforeground="black")
        self.scrolledtext_info.configure(width=10)
        self.scrolledtext_info.configure(wrap='word')
        self.scrolledtext_info.bind('<ButtonRelease-1>', self.get_scrolledtext_info)
        self.info = None

        self.lbl_selected_category = tk.Label(self.lblframe_settings_panel)
        self.lbl_selected_category.place(relx=0.287, rely=0.478, height=21
                , width=114, bordermode='ignore')
        self.lbl_selected_category.configure(anchor='w')
        self.lbl_selected_category.configure(background="#d9d9d9")
        self.lbl_selected_category.configure(disabledforeground="#a3a3a3")
        self.lbl_selected_category.configure(foreground="#000000")
        self.lbl_selected_category.configure(relief='groove')
        self.lbl_selected_category.configure(text='''Selected:''')
        self.lbl_selected_category.configure(width=114)

        self.scrolledlistbox_products = ScrolledListBox(self.lblframe_settings_panel)
        self.scrolledlistbox_products.place(relx=0.426, rely=0.149
                , relheight=0.582, relwidth=0.31, bordermode='ignore')
        self.scrolledlistbox_products.configure(background="white")
        self.scrolledlistbox_products.configure(disabledforeground="#a3a3a3")
        self.scrolledlistbox_products.configure(font="TkFixedFont")
        self.scrolledlistbox_products.configure(foreground="black")
        self.scrolledlistbox_products.configure(highlightbackground="#d9d9d9")
        self.scrolledlistbox_products.configure(highlightcolor="#d9d9d9")
        self.scrolledlistbox_products.configure(selectbackground="#c4c4c4")
        self.scrolledlistbox_products.configure(selectforeground="black")
        self.scrolledlistbox_products.configure(selectmode='single')
        self.scrolledlistbox_products.configure(width=10)
        self.scrolledlistbox_products.bind('<ButtonRelease-1>', self.get_scrolledlistbox_products_selection)
        self.selected_product = None

        self.lbl_selected_product = tk.Label(self.lblframe_settings_panel)
        self.lbl_selected_product.place(relx=0.426, rely=0.687, height=21
                , width=294, bordermode='ignore')
        self.lbl_selected_product.configure(anchor='w')
        self.lbl_selected_product.configure(background="#d9d9d9")
        self.lbl_selected_product.configure(disabledforeground="#a3a3a3")
        self.lbl_selected_product.configure(foreground="#000000")
        self.lbl_selected_product.configure(relief='groove')
        self.lbl_selected_product.configure(text='''Selected:''')

        self.lbl_list_products = tk.Label(self.lblframe_settings_panel)
        self.lbl_list_products.place(relx=0.426, rely=0.09, height=21, width=284
                , bordermode='ignore')
        self.lbl_list_products.configure(activebackground="#f9f9f9")
        self.lbl_list_products.configure(activeforeground="black")
        self.lbl_list_products.configure(anchor='w')
        self.lbl_list_products.configure(background="#d9d9d9")
        self.lbl_list_products.configure(disabledforeground="#a3a3a3")
        self.lbl_list_products.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.lbl_list_products.configure(foreground="#000000")
        self.lbl_list_products.configure(highlightbackground="#d9d9d9")
        self.lbl_list_products.configure(highlightcolor="black")
        self.lbl_list_products.configure(text='''Available Products''')

        self.lbl_product_image = tk.Label(self.lblframe_settings_panel)
        self.lbl_product_image.place(relx=0.755, rely=0.149, height=200
                , width=200, bordermode='ignore')
        self.lbl_product_image.configure(background="#d9d9d9")
        self.lbl_product_image.configure(disabledforeground="#a3a3a3")
        self.lbl_product_image.configure(foreground="#000000")
        self.lbl_product_image.configure(relief='groove')
        self.lbl_product_image.configure(text='''No Image''')
        self.lbl_product_image.configure(width=200)

        self.btn_add_image = tk.Button(self.lblframe_settings_panel)
        self.btn_add_image.place(relx=0.755, rely=0.776, height=24, width=197
                , bordermode='ignore')
        self.btn_add_image.configure(activebackground="#ececec")
        self.btn_add_image.configure(activeforeground="#000000")
        self.btn_add_image.configure(background="#d9d9d9")
        self.btn_add_image.configure(disabledforeground="#a3a3a3")
        self.btn_add_image.configure(font="-family {Franklin Gothic Medium} -size 10 -weight bold")
        self.btn_add_image.configure(foreground="#000000")
        self.btn_add_image.configure(highlightbackground="#d9d9d9")
        self.btn_add_image.configure(highlightcolor="black")
        self.btn_add_image.configure(pady="0")
        self.btn_add_image.configure(text='''Find Image''')
        self.btn_add_image.configure(width=197)

        self.btn_remove_product = tk.Button(self.lblframe_settings_panel)
        self.btn_remove_product.place(relx=0.457, rely=0.866, height=24
                , width=217, bordermode='ignore')
        self.btn_remove_product.configure(activebackground="#ececec")
        self.btn_remove_product.configure(activeforeground="#000000")
        self.btn_remove_product.configure(background="#d9d9d9")
        self.btn_remove_product.configure(disabledforeground="#a3a3a3")
        self.btn_remove_product.configure(font="-family {Franklin Gothic Medium} -size 10 -weight bold")
        self.btn_remove_product.configure(foreground="#000000")
        self.btn_remove_product.configure(highlightbackground="#d9d9d9")
        self.btn_remove_product.configure(highlightcolor="black")
        self.btn_remove_product.configure(pady="0")
        self.btn_remove_product.configure(text='''Remove Selected Product''')

        self.btn_add_product = tk.Button(self.lblframe_settings_panel)
        self.btn_add_product.place(relx=0.755, rely=0.866, height=24, width=197
                                   , bordermode='ignore')
        self.btn_add_product.configure(activebackground="#ececec")
        self.btn_add_product.configure(activeforeground="#000000")
        self.btn_add_product.configure(background="#d9d9d9")
        self.btn_add_product.configure(disabledforeground="#a3a3a3")
        self.btn_add_product.configure(font="-family {Franklin Gothic Medium} -size 10 -weight bold")
        self.btn_add_product.configure(foreground="#000000")
        self.btn_add_product.configure(highlightbackground="#d9d9d9")
        self.btn_add_product.configure(highlightcolor="black")
        self.btn_add_product.configure(pady="0")
        self.btn_add_product.configure(text='''Add/Replace Product''')
        self.btn_add_product.configure(width=197)

        self.btn_clear_selection = tk.Button(self.lblframe_settings_panel)
        self.btn_clear_selection.place(relx=0.457, rely=0.776, height=24
                , width=127, bordermode='ignore')
        self.btn_clear_selection.configure(activebackground="#ececec")
        self.btn_clear_selection.configure(activeforeground="#000000")
        self.btn_clear_selection.configure(background="#d9d9d9")
        self.btn_clear_selection.configure(disabledforeground="#a3a3a3")
        self.btn_clear_selection.configure(font="-family {Franklin Gothic Medium} -size 10 -weight bold")
        self.btn_clear_selection.configure(foreground="#000000")
        self.btn_clear_selection.configure(highlightbackground="#d9d9d9")
        self.btn_clear_selection.configure(highlightcolor="black")
        self.btn_clear_selection.configure(pady="0")
        self.btn_clear_selection.configure(text='''Clear Selection''')

        self.btn_clear_all = tk.Button(self.lblframe_settings_panel)
        self.btn_clear_all.place(relx=0.596, rely=0.776, height=24, width=87
                , bordermode='ignore')
        self.btn_clear_all.configure(activebackground="#ececec")
        self.btn_clear_all.configure(activeforeground="#000000")
        self.btn_clear_all.configure(background="#d9d9d9")
        self.btn_clear_all.configure(disabledforeground="#a3a3a3")
        self.btn_clear_all.configure(font="-family {Franklin Gothic Medium} -size 10 -weight bold")
        self.btn_clear_all.configure(foreground="#000000")
        self.btn_clear_all.configure(highlightbackground="#d9d9d9")
        self.btn_clear_all.configure(highlightcolor="black")
        self.btn_clear_all.configure(pady="0")
        self.btn_clear_all.configure(text='''Clear All''')

        self.btn_go_back = tk.Button(self.lblframe_settings_panel)
        self.btn_go_back.place(relx=0.021, rely=0.09, height=24, width=87
                , bordermode='ignore')
        self.btn_go_back.configure(activebackground="#ececec")
        self.btn_go_back.configure(activeforeground="#000000")
        self.btn_go_back.configure(background="#d9d9d9")
        self.btn_go_back.configure(disabledforeground="#a3a3a3")
        self.btn_go_back.configure(font="-family {Franklin Gothic Medium} -size 10 -weight bold")
        self.btn_go_back.configure(foreground="#000000")
        self.btn_go_back.configure(highlightbackground="#d9d9d9")
        self.btn_go_back.configure(highlightcolor="black")
        self.btn_go_back.configure(pady="0")
        self.btn_go_back.configure(text='''Go Back''')

        # ------------------------------------------------------------------
        # All Button Commands
        self.btn_add_image.configure(command=self.add_image)
        self.btn_remove_product.configure(command=lambda: self.remove_product())
        self.btn_add_product.configure(command=lambda: self.add_product())
        self.btn_clear_selection.configure(command=lambda: self.clear_selection())
        self.btn_clear_all.configure(command=lambda: self.clear_all())
        self.btn_go_back.configure(command=self.go_back)

        self.pack()

    def display_logged_in_user(self):
        """
        Show the user that is logged in.
        """
        self.msg_box.configure(text='You are logged in as "{}".'.format(self.main_frame.username))

    def go_back(self):
        """
        Go back to the Account Page.
        """
        self.pack()
        self.top_frame.goto_settings()

    def lift(self):
        """
        Lift this frame to the front.
        """
        self.lblframe_account.place(relx=0.02, rely=0.208, relheight=0.605, relwidth=0.957)
        self.lblframe_account.lift()

    def pack(self):
        """
        Pack this frame away.
        """
        self.lblframe_account.pack()

    def destroy(self):
        """
            Destroy this widget.
        """
        self.lblframe_account.destroy()

    def validate_entries(self, event):
        """
        Validate user entries when they type and release a key in the entry boxes.

            Currently validating:
            - Price
            - Quantity

        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        price = self.entry_price.get()
        quantity = self.entry_quantity.get()

        self.entry_price.delete(0, END)
        self.entry_quantity.delete(0, END)

        self.entry_price.insert(0, re.sub("[^0-9]", "", price))
        self.entry_quantity.insert(0, re.sub("[^0-9]", "", quantity))

    def get_scrolledlistbox_products_selection(self, event):
        """
        Get the currently selected product text in "scrolledlistbox_products".
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        try:
            self.selected_product = self.scrolledlistbox_products.get(self.scrolledlistbox_products.curselection())
            self.pid = self.selected_product[0]
            name = self.selected_product[1]
            category = self.selected_product[2]
            price = self.selected_product[3]
            quantity = self.selected_product[4]
            info = self.selected_product[5]

            # Update GUI
            self.entry_product_name.delete(0, END)
            self.entry_price.delete(0, END)
            self.entry_quantity.delete(0, END)

            self.entry_product_name.insert(0, name)
            self.entry_price.insert(0, price)
            self.entry_quantity.insert(0, quantity)

            self.scrolledtext_info.delete(1.0, END)
            self.scrolledtext_info.insert(END, info)

            self.selected_category = category
            self.info = info
            self.lbl_selected_category.configure(text="Selected: {}".format(self.selected_category))

            self.cursor.execute("SELECT Image FROM Products WHERE PID = {}".format(self.pid))
            image_blob = self.cursor.fetchone()[0]

            # Extract image data.
            image_data = image_blob
            with open(os.path.join("Images", "temp_image_add.jpeg"), 'wb') as f:
                f.write(image_data)
            f.close()

            self.image_file = os.path.join("Images", "temp_image_add.jpeg")

            try:
                img = Image.open(self.image_file)
                img = img.resize((200, 200), Image.ANTIALIAS)
                self.image = ImageTk.PhotoImage(img)

                # Show image to GUI.
                self.hide_image_text()
                self.lbl_product_image.configure(image=self.image, compound=CENTER)
            except:
                self.show_image_text()

            self.lbl_selected_product.configure(text='Selected: {}'.format(name))
            print(self.selected_product)
        except:
            pass

    def get_listbox_categories_selection(self, event):
        """
        Get the currently selected product text in "listbox_categories".
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        try:
            self.selected_category = self.listbox_categories.get(self.listbox_categories.curselection())
            self.lbl_selected_category.configure(text="Selected: {}".format(self.selected_category))
            print(self.selected_category)
        except:
            pass

    def get_scrolledtext_info(self, event):
        """
        Get all text in "scrolledtext_info".
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        self.info = self.scrolledtext_info.get("1.0", END)
        # print(self.info)

    def setup_scrolledlist(self):
        """
        Setup the scrolled list with a list of products to add promos to.
        """
        ### Add products to first list ###
        self.cursor.execute("SELECT PID, Name, Category, Price, Quantity, Info FROM Products WHERE Active == 1")
        products = self.cursor.fetchall()

        # Clear listbox.
        self.scrolledlistbox_products.delete(0, END)

        # Add all products to listbox.
        for product in products:
            self.scrolledlistbox_products.insert(0, product)

        ### Add categories to second list. ###
        # Clear listbox.
        self.listbox_categories.delete(0, END)

        self.listbox_categories.insert(0, "New")
        self.listbox_categories.insert(1, "Used")

        self.lbl_selected_category.configure(text="Selected: {}".format(self.selected_category))

    def show_image_text(self):
        """
        Display "No Image" onto the Tkinter label that shows admins the product image.
        """
        try:
            self.lbl_product_image.configure(text="No Image")
        except:
            pass

    def hide_image_text(self):
        """
        Display nothing on the Tkinter label that shows admins the product image.
        """
        try:
            self.lbl_product_image.configure(text="")
        except:
            pass

    def add_image(self):
        """
        Set an image ready for the product that will be added by calling "add_product".
        """

        # Ask user for a file.
        self.image_file = askopenfilename()
        if self.image_file == "":  # Return if the no file was selected
            return

        try:
            img = Image.open(self.image_file)
            img = img.resize((200, 200), Image.ANTIALIAS)
            self.image = ImageTk.PhotoImage(img)

            # Show image to GUI.
            self.hide_image_text()
            self.lbl_product_image.configure(image=self.image, compound=CENTER)
        except:
            tk.messagebox.showwarning("Invalid or Corrupted Image Format",
                                      "The file you provided is an invalid image format or is corrupted.",
                                      icon="error")
            return

    def add_product(self):
        """
        Add the product to the database.
        If the product already exists in the database, ask the admin if they want to replace the product.
        """

        # Get a randomly generated PID for the product.
        is_duplicate_pid = True
        while self.pid is None and is_duplicate_pid:

            r = Random()
            pid = r.randint(0, 99999999)
            self.cursor.execute("SELECT PID FROM Products WHERE PID = {}".format(pid))

            pid_column = self.cursor.fetchone()
            if pid_column is not None:
                is_duplicate_pid = True
            else:
                is_duplicate_pid = False
                self.pid = pid

        name = self.entry_product_name.get()
        category = self.selected_category
        price = self.entry_price.get()
        quantity = self.entry_quantity.get()

        self.get_scrolledtext_info(None)
        info = self.info

        try:
            with open(self.image_file, 'rb') as f:
                image_blob = sqlite3.Binary(f.read())
            f.close()
        except:
            image_blob = (None,)

        if is_duplicate_pid:
            if tk.messagebox.askyesno("Replace selected product?",
                                      "Are you sure you want to replace "
                                      "the selected product with the information you provided? "
                                      "\n\nThis action is final.",
                                      icon="warning"):
                # Yes.
                self.cursor.execute("UPDATE Products SET "
                                    "Name = ?, Category = ?, Price = ?, Quantity = ?, Info = ?, Image = ?, Active = 1"
                                    "WHERE PID = ?", (name, category, price, quantity, info, image_blob, self.pid))
                self.conn.commit()
        else:
            if image_blob != (None,):
                self.cursor.execute("INSERT INTO Products "
                                    "(PID, 'Name', 'Category', Price, Quantity, 'Info', Image, Active) "
                                    "VALUES (?, ?, ?, ?, ?, ?, ?, 1)",
                                    (self.pid, name, category, price, quantity, info, image_blob))
            else:
                try:
                    self.cursor.execute("INSERT INTO Products "
                                        "(PID, 'Name', 'Category', Price, Quantity, 'Info', Active) "
                                        "VALUES (?, ?, ?, ?, ?, ?, 1)",
                                        (self.pid, name, category, price, quantity, info))
                except:
                    tk.messagebox.showinfo("Error",
                                           "Cannot add this product. One of the entries may not be filled out yet.",
                                           icon="error")
                    return

            tk.messagebox.showinfo("Product added",
                                   "The product was successfully added.",
                                   icon="info")
            self.conn.commit()


        self.pid = None
        self.setup_scrolledlist()

    def remove_product(self):
        """
        Remove the product from the database.
        """
        if tk.messagebox.askyesno("Remove selected product?",
                                  "Are you sure you want to remove the selected product? "
                                  "\n\nThis action is final.",
                                  icon="warning"):
            if self.pid is not None:
                # Make item unavailable.
                self.cursor.execute("UPDATE Products SET Active == 0 WHERE PID = {}".format(self.pid))

                # Remove product from user's carts.
                self.cursor.execute("SELECT * FROM Cart WHERE CheckedOut == 0")
                carts = self.cursor.fetchall()
                if carts is not None:
                    for cart in carts:
                        cid = cart[0]
                        self.cursor.execute("DELETE FROM CartItems WHERE CID = {} AND PID = {}".format(cid, self.pid))

                self.conn.commit()
            else:
                tk.messagebox.showinfo("Error",
                                       "Please select one product from the list to remove.",
                                       icon="error")

        # Selected pid to none. Also refresh/setup scrolled lists GUI.
        self.pid = None
        self.setup_scrolledlist()

    def clear_selection(self):
        """
        Clear the product you selected.
        """
        self.pid = None
        self.lbl_selected_product.configure(text='Selected:')
        self.setup_scrolledlist()

    def clear_all(self):
        """
        Clear all widgets this page.
        :return:
        """
        self.entry_product_name.delete(0, END)
        self.entry_price.delete(0, END)
        self.entry_quantity.delete(0, END)
        self.scrolledtext_info.delete(1.0, END)

        self.image = None
        self.image_file = ""
        self.lbl_product_image.configure(image="")
        self.show_image_text()

        self.selected_product = None
        self.selected_category = None

        self.clear_selection()


# The following code is added to facilitate some Scrolled widgets.
class AutoScroll(object):
    """
    Allows scrolling for Tkinter objects that support vertical and horizontal scrolling.
    This automatically configures the scrollbars for a given widget.

    :param master: The widget to be given vertical and horizontal scrolling if possible.
    """

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

###########################################################
