#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Mar 08, 2019 02:13:12 AM CST  platform: Windows NT
#
# GUI module EDITED by Kong Jimmy Vang.
#

""" LoginRegisterPage.py
    
    Description:
        This is the Login and Registration page for the shopping cart project.
            It should only be shown when the user is not logged in.
    
    Team: Daniel Bartelson, Ian Neville, Brian Draheim, Kong Jimmy Vang
    Coder(s): Kong Jimmy Vang, Ian Neville, Daniel Bartelson
    Database: Brian Draheim
"""

import os
import sys

#######################################################
# Check the version of Python and import accordingly. #
#######################################################
if sys.version_info.major == 2:
    # Python 2.x
    from Tkinter import *
    import Tkinter as tk
    import Tkinter.messagebox
    import ttk
elif sys.version_info.major == 3:
    # Python 3.x
    from tkinter import *
    import tkinter as tk
    import tkinter.messagebox
    import tkinter.ttk as ttk
else:
    # Unsupported Version
    print("\nThis version of Python is not supported.")
    print("***EXITING SOFTWARE***")
    sys.exit()


DEBUG = True

###########################################################


class LoginRegisterPage(tk.Frame):
    """
    A Tkinter.Frame object.

    Initializes the LoginRegisterPage frame.
    """
    def __init__(self, top_frame=None, *args, **kwargs):
        """
        :param top_frame: A reference to a Tkinter.Frame object.
            (Used to allow access to the ShoppingCart's MainFrame.)
        :param args:
        :param kwargs:
        """

        tk.Frame.__init__(self, *args, **kwargs)

        ### Attributes ###
        self.top_frame = top_frame
        
        '''This class configures and populates the toplevel window.
           top_frame is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        font11 = "-family {Franklin Gothic Medium} -size 10 -weight " \
                 "bold"
        font13 = "-family {Arial} -size 10 -weight bold"
        font9 = "-family {Franklin Gothic Heavy} -size 11"

        """self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected_product', _compcolor), ('active',_ana2color)])"""

        # self.geometry("600x450+650+150")
        # self.title("Shopping Cart")
        self.configure(background="#d9d9d9")
        self.configure(highlightbackground="#d9d9d9")
        self.configure(highlightcolor="black")

        ### Widgets ###
        self.lblframe_login = tk.LabelFrame(self)
        self.lblframe_login.place(relx=0.215, rely=0.273, relheight=0.163
                , relwidth=0.547)
        self.lblframe_login.configure(relief='groove')
        self.lblframe_login.configure(font=font9)
        self.lblframe_login.configure(foreground="black")
        self.lblframe_login.configure(text='Login')
        self.lblframe_login.configure(background="#d9d9d9")
        self.lblframe_login.configure(highlightbackground="#d9d9d9")
        self.lblframe_login.configure(highlightcolor="black")
        self.lblframe_login.configure(width=560)

        self.entry_login_username = tk.Entry(self.lblframe_login)
        self.entry_login_username.place(relx=0.036, rely=0.24, height=20
                , relwidth=0.929, bordermode='ignore')
        self.entry_login_username.configure(background="white")
        self.entry_login_username.configure(disabledforeground="#a3a3a3")
        self.entry_login_username.configure(font=font13)
        self.entry_login_username.configure(foreground="#000000")
        self.entry_login_username.configure(highlightbackground="#d9d9d9")
        self.entry_login_username.configure(highlightcolor="black")
        self.entry_login_username.configure(insertbackground="black")
        self.entry_login_username.configure(selectbackground="#c4c4c4")
        self.entry_login_username.configure(selectforeground="black")
        self.entry_login_username.bind('<FocusIn>', self.clear_widget)
        self.entry_login_username.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_login_username.bind('<Return>', self.login)
        
        self.entry_login_password = tk.Entry(self.lblframe_login)
        self.entry_login_password.place(relx=0.036, rely=0.4, height=20
                , relwidth=0.929, bordermode='ignore')
        self.entry_login_password.configure(background="white")
        self.entry_login_password.configure(disabledforeground="#a3a3a3")
        self.entry_login_password.configure(font=font13)
        self.entry_login_password.configure(foreground="#000000")
        self.entry_login_password.configure(highlightbackground="#d9d9d9")
        self.entry_login_password.configure(highlightcolor="black")
        self.entry_login_password.configure(insertbackground="black")
        self.entry_login_password.configure(selectbackground="#c4c4c4")
        self.entry_login_password.configure(selectforeground="black")
        self.entry_login_password.bind('<FocusIn>', self.clear_widget)
        self.entry_login_password.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_login_password.bind('<Return>', self.login)

        self.btn_login = tk.Button(self.lblframe_login)
        self.btn_login.place(relx=0.429, rely=0.72, height=24, width=81
                , bordermode='ignore')
        self.btn_login.configure(activebackground="#ececec")
        self.btn_login.configure(activeforeground="#000000")
        self.btn_login.configure(background="#d9d9d9")
        self.btn_login.configure(disabledforeground="#a3a3a3")
        self.btn_login.configure(font=font11)
        self.btn_login.configure(foreground="#000000")
        self.btn_login.configure(highlightbackground="#d9d9d9")
        self.btn_login.configure(highlightcolor="black")
        self.btn_login.configure(pady="0")
        self.btn_login.configure(text='Login')

        self.lblframe_register = tk.LabelFrame(self)
        self.lblframe_register.place(relx=0.215, rely=0.495, relheight=0.241
                , relwidth=0.547)
        self.lblframe_register.configure(relief='groove')
        self.lblframe_register.configure(font=font9)
        self.lblframe_register.configure(foreground="black")
        self.lblframe_register.configure(text='Register')
        self.lblframe_register.configure(background="#d9d9d9")
        self.lblframe_register.configure(highlightbackground="#d9d9d9")
        self.lblframe_register.configure(highlightcolor="black")
        self.lblframe_register.configure(width=560)

        self.entry_register_username = tk.Entry(self.lblframe_register)
        self.entry_register_username.place(relx=0.036, rely=0.162, height=20
                , relwidth=0.429, bordermode='ignore')
        self.entry_register_username.configure(background="white")
        self.entry_register_username.configure(disabledforeground="#a3a3a3")
        self.entry_register_username.configure(font=font13)
        self.entry_register_username.configure(foreground="#000000")
        self.entry_register_username.configure(highlightbackground="#d9d9d9")
        self.entry_register_username.configure(highlightcolor="black")
        self.entry_register_username.configure(insertbackground="black")
        self.entry_register_username.configure(selectbackground="#c4c4c4")
        self.entry_register_username.configure(selectforeground="black")
        self.entry_register_username.bind('<FocusIn>', self.clear_widget)
        self.entry_register_username.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_register_username.bind('<Return>', self.register)
        
        self.entry_register_password = tk.Entry(self.lblframe_register)
        self.entry_register_password.place(relx=0.036, rely=0.27, height=20
                , relwidth=0.429, bordermode='ignore')
        self.entry_register_password.configure(background="white")
        self.entry_register_password.configure(disabledforeground="#a3a3a3")
        self.entry_register_password.configure(font=font13)
        self.entry_register_password.configure(foreground="#000000")
        self.entry_register_password.configure(highlightbackground="#d9d9d9")
        self.entry_register_password.configure(highlightcolor="black")
        self.entry_register_password.configure(insertbackground="black")
        self.entry_register_password.configure(selectbackground="#c4c4c4")
        self.entry_register_password.configure(selectforeground="black")
        self.entry_register_password.bind('<FocusIn>', self.clear_widget)
        self.entry_register_password.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_register_password.bind('<Return>', self.register)
        
        self.entry_register_confirm_password = tk.Entry(self.lblframe_register)
        self.entry_register_confirm_password.place(relx=0.536, rely=0.27
                ,height=20, relwidth=0.429, bordermode='ignore')
        self.entry_register_confirm_password.configure(background="white")
        self.entry_register_confirm_password.configure(disabledforeground="#a3a3a3")
        self.entry_register_confirm_password.configure(font=font13)
        self.entry_register_confirm_password.configure(foreground="#000000")
        self.entry_register_confirm_password.configure(highlightbackground="#d9d9d9")
        self.entry_register_confirm_password.configure(highlightcolor="black")
        self.entry_register_confirm_password.configure(insertbackground="black")
        self.entry_register_confirm_password.configure(selectbackground="#c4c4c4")
        self.entry_register_confirm_password.configure(selectforeground="black")
        self.entry_register_confirm_password.bind('<FocusIn>', self.clear_widget)
        self.entry_register_confirm_password.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_register_confirm_password.bind('<Return>', self.register)
        
        self.entry_register_first_name = tk.Entry(self.lblframe_register)
        self.entry_register_first_name.place(relx=0.036, rely=0.378, height=20
                , relwidth=0.429, bordermode='ignore')
        self.entry_register_first_name.configure(background="white")
        self.entry_register_first_name.configure(disabledforeground="#a3a3a3")
        self.entry_register_first_name.configure(font=font13)
        self.entry_register_first_name.configure(foreground="#000000")
        self.entry_register_first_name.configure(highlightbackground="#d9d9d9")
        self.entry_register_first_name.configure(highlightcolor="black")
        self.entry_register_first_name.configure(insertbackground="black")
        self.entry_register_first_name.configure(selectbackground="#c4c4c4")
        self.entry_register_first_name.configure(selectforeground="black")
        self.entry_register_first_name.bind('<FocusIn>', self.clear_widget)
        self.entry_register_first_name.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_register_first_name.bind('<Return>', self.register)
        
        self.entry_register_last_name = tk.Entry(self.lblframe_register)
        self.entry_register_last_name.place(relx=0.036, rely=0.486, height=20
                , relwidth=0.429, bordermode='ignore')
        self.entry_register_last_name.configure(background="white")
        self.entry_register_last_name.configure(disabledforeground="#a3a3a3")
        self.entry_register_last_name.configure(font=font13)
        self.entry_register_last_name.configure(foreground="#000000")
        self.entry_register_last_name.configure(highlightbackground="#d9d9d9")
        self.entry_register_last_name.configure(highlightcolor="black")
        self.entry_register_last_name.configure(insertbackground="black")
        self.entry_register_last_name.configure(selectbackground="#c4c4c4")
        self.entry_register_last_name.configure(selectforeground="black")
        self.entry_register_last_name.bind('<FocusIn>', self.clear_widget)
        self.entry_register_last_name.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_register_last_name.bind('<Return>', self.register)
        """
        self.entry_register_street_address = tk.Entry(self.lblframe_register)
        self.entry_register_street_address.place(relx=0.036, rely=0.595, height=20
                , relwidth=0.429, bordermode='ignore')
        self.entry_register_street_address.configure(background="white")
        self.entry_register_street_address.configure(disabledforeground="#a3a3a3")
        self.entry_register_street_address.configure(font=font13)
        self.entry_register_street_address.configure(foreground="#000000")
        self.entry_register_street_address.configure(highlightbackground="#d9d9d9")
        self.entry_register_street_address.configure(highlightcolor="black")
        self.entry_register_street_address.configure(insertbackground="black")
        self.entry_register_street_address.configure(selectbackground="#c4c4c4")
        self.entry_register_street_address.configure(selectforeground="black")
        self.entry_register_street_address.bind('<FocusIn>', self.clear_widget)
        self.entry_register_street_address.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_register_street_address.bind('<Return>', self.register)
        
        self.entry_register_middle_name = tk.Entry(self.lblframe_register)
        self.entry_register_middle_name.place(relx=0.536, rely=0.378, height=20
                , relwidth=0.429, bordermode='ignore')
        self.entry_register_middle_name.configure(background="white")
        self.entry_register_middle_name.configure(disabledforeground="#a3a3a3")
        self.entry_register_middle_name.configure(font=font13)
        self.entry_register_middle_name.configure(foreground="#000000")
        self.entry_register_middle_name.configure(highlightbackground="#d9d9d9")
        self.entry_register_middle_name.configure(highlightcolor="black")
        self.entry_register_middle_name.configure(insertbackground="black")
        self.entry_register_middle_name.configure(selectbackground="#c4c4c4")
        self.entry_register_middle_name.configure(selectforeground="black")
        self.entry_register_middle_name.bind('<FocusIn>', self.clear_widget)
        self.entry_register_middle_name.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_register_middle_name.bind('<Return>', self.register)
        
        self.entry_register_zip_code = tk.Entry(self.lblframe_register)
        self.entry_register_zip_code.place(relx=0.536, rely=0.595, height=20
                , relwidth=0.429, bordermode='ignore')
        self.entry_register_zip_code.configure(background="white")
        self.entry_register_zip_code.configure(disabledforeground="#a3a3a3")
        self.entry_register_zip_code.configure(font=font13)
        self.entry_register_zip_code.configure(foreground="#000000")
        self.entry_register_zip_code.configure(highlightbackground="#d9d9d9")
        self.entry_register_zip_code.configure(highlightcolor="black")
        self.entry_register_zip_code.configure(insertbackground="black")
        self.entry_register_zip_code.configure(selectbackground="#c4c4c4")
        self.entry_register_zip_code.configure(selectforeground="black")
        self.entry_register_zip_code.bind('<FocusIn>', self.clear_widget)
        self.entry_register_zip_code.bind('<FocusOut>', self.repopulate_defaults)
        self.entry_register_zip_code.bind('<Return>', self.register)
        """
        self.btn_register = tk.Button(self.lblframe_register)
        self.btn_register.place(relx=0.411, rely=0.811, height=24, width=93
                , bordermode='ignore')
        self.btn_register.configure(activebackground="#ececec")
        self.btn_register.configure(activeforeground="#000000")
        self.btn_register.configure(background="#d9d9d9")
        self.btn_register.configure(disabledforeground="#a3a3a3")
        self.btn_register.configure(font=font11)
        self.btn_register.configure(foreground="#000000")
        self.btn_register.configure(highlightbackground="#d9d9d9")
        self.btn_register.configure(highlightcolor="black")
        self.btn_register.configure(pady="0")
        self.btn_register.configure(text='Register')

        # ------------------------------------------------------------------
        # All Button Commands
        self.btn_login.configure(command=lambda: self.login(None))
        self.btn_register.configure(command=lambda: self.register(None))

        # Initialized all defaults for each Entry object.
        self.repopulate_defaults(None)

    def focus_next_window(self, event):
        event.widget.tk_focusNext().focus()
        return "break"

    def login(self, event):
        """
        Ask "ShoppingCart.py" to log in the user.
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        # self.btn_login.focus()
        if not self.validate_login_entries(None):
            self.top_frame.login()

    def register(self, event):
        """
        Ask "ShoppingCart.py" to register the user.
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """
        # self.btn_register.focus()
        if not self.validate_registration_entries(None):
            self.top_frame.register()

    def validate_login_entries(self, event):
        """
        Validate login entries when users click Login.
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        :return: Return True if input is invalid. Return False if input is okay and valid.
        """
        input_is_invalid = False
        background_color = "#b00020"
        if self.entry_login_username.get() == "" or self.entry_login_username.cget("foreground") == "#8c8c8c":
            input_is_invalid = True
            self.entry_login_username.configure(background=background_color)
        if self.entry_login_password.get() == "" or self.entry_login_password.cget("foreground") == "#8c8c8c":
            input_is_invalid = True
            self.entry_login_password.configure(background=background_color)

        if input_is_invalid:
            tk.messagebox.showinfo("Missing Login Information",
                                   "Please fill out the missing login information highlighted in red.",
                                   icon="error")

        return input_is_invalid

    def validate_registration_entries(self, event):
        """
        Validate registration entries when users click Register.
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        :return: Return True if input is invalid. Return False if input is okay and valid.
        """
        input_is_invalid = False
        background_color = "#b00020"

        if self.entry_register_username.get() == "" or self.entry_register_username.cget("foreground") == "#8c8c8c":
            input_is_invalid = True
            self.entry_register_username.configure(background=background_color)
        if self.entry_register_password.get() == "" or self.entry_register_password.cget("foreground") == "#8c8c8c":
            input_is_invalid = True
            self.entry_register_password.configure(background=background_color)
        if self.entry_register_confirm_password.get() == "" \
                or self.entry_register_confirm_password.cget("foreground") == "#8c8c8c":
            input_is_invalid = True
            self.entry_register_confirm_password.configure(background=background_color)
        if self.entry_register_first_name.get() == "" or self.entry_register_first_name.cget("foreground") == "#8c8c8c":
            input_is_invalid = True
            self.entry_register_first_name.configure(background=background_color)
        if self.entry_register_last_name.get() == "" or self.entry_register_last_name.cget("foreground") == "#8c8c8c":
            input_is_invalid = True
            self.entry_register_last_name.configure(background=background_color)

        if input_is_invalid:
            tk.messagebox.showinfo("Missing Requirements",
                                   "Please fill out the missing requirements highlighted in red.",
                                   icon="error")

        return input_is_invalid

    def clear_widget(self, event):
        """
        Clear the following widgets coded below when they are clicked on.
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """

        foreground_color = "#000000"
        background_color = "white"

        if self.entry_login_username == self.top_frame.focus_get() and self.entry_login_username.get() == 'Username':
            self.entry_login_username.delete(0, END)
            self.entry_login_username.configure(foreground=foreground_color, background=background_color)
        if self.entry_login_password == self.top_frame.focus_get() and self.entry_login_password.get() == 'Password':
            self.entry_login_password.delete(0, END)
            self.entry_login_password.configure(show='*')
            self.entry_login_password.configure(foreground=foreground_color, background=background_color)
        if self.entry_register_username == self.top_frame.focus_get() and self.entry_register_username.get() == 'Username':
            self.entry_register_username.delete(0, END)
            self.entry_register_username.configure(foreground=foreground_color, background=background_color)
        if self.entry_register_password == self.top_frame.focus_get() and self.entry_register_password.get() == 'Password':
            self.entry_register_password.delete(0, END)
            self.entry_register_password.configure(show='*')
            self.entry_register_password.configure(foreground=foreground_color, background=background_color)
        if self.entry_register_confirm_password == self.top_frame.focus_get() and self.entry_register_confirm_password.get() == 'Confirm Password':
            self.entry_register_confirm_password.delete(0, END)
            self.entry_register_confirm_password.configure(show='*')
            self.entry_register_confirm_password.configure(foreground=foreground_color, background=background_color)
        if self.entry_register_first_name == self.top_frame.focus_get() and self.entry_register_first_name.get() == 'First Name':
            self.entry_register_first_name.delete(0, END)
            self.entry_register_first_name.configure(foreground=foreground_color, background=background_color)
        """if self.entry_register_middle_name == self.top_frame.focus_get() and self.entry_register_middle_name.get() == 'Middle Name (Optional)':
            self.entry_register_middle_name.delete(0, END)
            self.entry_register_middle_name.configure(foreground=foreground_color, background=background_color)"""
        if self.entry_register_last_name == self.top_frame.focus_get() and self.entry_register_last_name.get() == 'Last Name':
            self.entry_register_last_name.delete(0, END)
            self.entry_register_last_name.configure(foreground=foreground_color, background=background_color)
        """if self.entry_register_street_address == self.top_frame.focus_get() and self.entry_register_street_address.get() == 'Street Address':
            self.entry_register_street_address.delete(0, END)
            self.entry_register_street_address.configure(foreground=foreground_color, background=background_color)
        if self.entry_register_zip_code == self.top_frame.focus_get() and self.entry_register_zip_code.get() == 'ZIP Code':
            self.entry_register_zip_code.delete(0, END)
            self.entry_register_zip_code.configure(foreground=foreground_color, background=background_color)"""

    # TODO ensure that the event argument is used, or remove it
    def repopulate_defaults(self, event):
        """
        Repopulate the following widgets coded below when they are not focused on.
        :param event: https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
        """

        foreground_color = "#8c8c8c"

        if self.entry_login_username != self.top_frame.focus_get() and self.entry_login_username.get() == '':
            self.entry_login_username.insert(0, 'Username')
            self.entry_login_username.configure(foreground=foreground_color)
        if self.entry_login_password != self.top_frame.focus_get() and self.entry_login_password.get() == '':
            self.entry_login_password.insert(0, 'Password')
            self.entry_login_password.configure(show='')
            self.entry_login_password.configure(foreground=foreground_color)
        if self.entry_register_username != self.top_frame.focus_get() and self.entry_register_username.get() == '':
            self.entry_register_username.insert(0, 'Username')
            self.entry_register_username.configure(foreground=foreground_color)
        if self.entry_register_password != self.top_frame.focus_get() and self.entry_register_password.get() == '':
            self.entry_register_password.insert(0, 'Password')
            self.entry_register_password.configure(show='')
            self.entry_register_password.configure(foreground=foreground_color)
        if self.entry_register_confirm_password != self.top_frame.focus_get() and self.entry_register_confirm_password.get() == '':
            self.entry_register_confirm_password.insert(0, 'Confirm Password')
            self.entry_register_confirm_password.configure(show='')
            self.entry_register_confirm_password.configure(foreground=foreground_color)
        if self.entry_register_first_name != self.top_frame.focus_get() and self.entry_register_first_name.get() == '':
            self.entry_register_first_name.insert(0, 'First Name')
            self.entry_register_first_name.configure(foreground=foreground_color)
        """if self.entry_register_middle_name != self.top_frame.focus_get() and self.entry_register_middle_name.get() == '':
            self.entry_register_middle_name.insert(0, 'Middle Name (Optional)')
            self.entry_register_middle_name.configure(foreground=foreground_color)"""
        if self.entry_register_last_name != self.top_frame.focus_get() and self.entry_register_last_name.get() == '':
            self.entry_register_last_name.insert(0, 'Last Name')
            self.entry_register_last_name.configure(foreground=foreground_color)
        """if self.entry_register_street_address != self.top_frame.focus_get() and self.entry_register_street_address.get() == '':
            self.entry_register_street_address.insert(0, 'Street Address')
            self.entry_register_street_address.configure(foreground=foreground_color)
        if self.entry_register_zip_code != self.top_frame.focus_get() and self.entry_register_zip_code.get() == '':
            self.entry_register_zip_code.insert(0, 'ZIP Code')
            self.entry_register_zip_code.configure(foreground=foreground_color)"""

    # Reset all Entry widgets to their default texts.
    def reset_defaults(self):
        """
        Reset the following widgets coded below to their default values.
        """
        self.entry_login_username.delete(0, END)
        self.entry_login_password.delete(0, END)
        self.entry_register_username.delete(0, END)
        self.entry_register_password.delete(0, END)
        self.entry_register_confirm_password.delete(0, END)
        self.entry_register_first_name.delete(0, END)
        #self.entry_register_middle_name.delete(0, END)
        self.entry_register_last_name.delete(0, END)
        #self.entry_register_street_address.delete(0, END)
        #self.entry_register_zip_code.delete(0, END)
        self.entry_login_username.insert(0, 'Username')
        self.entry_login_password.insert(0, 'Password')
        self.entry_login_password.configure(show='')
        self.entry_register_username.insert(0, 'Username')
        self.entry_register_password.insert(0, 'Password')
        self.entry_register_password.configure(show='')
        self.entry_register_confirm_password.insert(0, 'Confirm Password')
        self.entry_register_confirm_password.configure(show='')
        self.entry_register_first_name.insert(0, 'First Name')
        #self.entry_register_middle_name.insert(0, 'Middle Name (Optional)')
        self.entry_register_last_name.insert(0, 'Last Name')
        #self.entry_register_street_address.insert(0, 'Street Address')
        #self.entry_register_zip_code.insert(0, 'ZIP Code')

        foreground_color = "#8c8c8c"

        self.entry_login_username.configure(foreground=foreground_color)
        self.entry_login_password.configure(foreground=foreground_color)
        self.entry_register_username.configure(foreground=foreground_color)
        self.entry_register_password.configure(foreground=foreground_color)
        self.entry_register_confirm_password.configure(foreground=foreground_color)
        self.entry_register_first_name.configure(foreground=foreground_color)
        #self.entry_register_middle_name.configure(foreground=foreground_color)
        self.entry_register_last_name.configure(foreground=foreground_color)
        #self.entry_register_street_address.configure(foreground=foreground_color)
        #self.entry_register_zip_code.configure(foreground=foreground_color)

###########################################################
